————————————————————————————————————————————————————————————————————————————————————————————————————————
【 bagging 和 boosting 的区别】
	1）样本选择上：
	Bagging：训练集是在原始集中有放回选取的，从原始集中选出的各轮训练集之间是独立的。
	Boosting：每一轮的训练集不变，只是训练集中每个样例在分类器中的权重发生变化。而权值是根据上一轮的分类结果进行调整。

	2）样例权重：
	Bagging：使用均匀取样，每个样例的权重相等
	Boosting：根据错误率不断调整样例的权值，错误率越大则权重越大。

	3）预测函数：
	Bagging：所有预测函数的权重相等。
	Boosting：每个弱分类器都有相应的权重，对于分类误差小的分类器会有更大的权重。

	4）并行计算：
	Bagging：各个预测函数可以并行生成
	Boosting：各个预测函数只能顺序生成，因为后一个模型参数需要前一轮模型的结果。

	5)bagging是减少variance，而boosting是减少bias


————————————————————————————————————————————————————————————————————————————————————————————————————————
【bagging减少variance，boosting减少bias】
	Bagging对样本重采样，对每一重采样得到的子样本集训练一个模型，最后取平均。
	由于子样本集的相似性以及使用的是同种模型，因此各模型有近似相等的bias和variance（事实上，各模型的分布也近似相同，但不独立）。
	E(allXi/n)=E(Xi),所以bagging后的bias和单个子模型的接近，一般来说不能显著降低bias。
	若各子模型独立，则有Var(allXi/n)=Var(Xi)/n,此时可以显著降低variance。
	若各子模型完全相同，则Var(allXi/n)=Var(Xi),此时不会降低variance。
	bagging方法得到的各子模型是有一定相关性的，属于上面两个极端状况的中间态。
	Random forest通过随机选取变量子集做拟合的方式de-correlated了各子模型（树），使得variance进一步降低。
	两两变量之间的相关性为p，Var(allXi/n)=po2+(1-p)*o2/n
	bagging降低的是第二项，random forest是同时降低两项。
	
	因此boosting是在sequential地最小化损失函数，其bias自然逐步下降。
	但由于是采取这种sequential、adaptive的策略，各子模型之间是强相关的，于是子模型之和并不能显著降低variance。
	所以说boosting主要还是靠降低bias来提升预测精度。
	
	
————————————————————————————————————————————————————————————————————————————————————————————————————————
【什么是OOB？随机森林中OOB是如何计算的，它有什么优缺点？】
	bagging方法中Bootstrap每次约有1/3的样本不会出现在Bootstrap所采集的样本集合中，当然也就没有参加决策树的建立。
	把这1/3的数据称为袋外数据oob（out of bag），它可以用于取代测试集误差估计方法。
	
	对于已经生成的随机森林，用袋外数据测试其性能。
	假设袋外数据总数为O，用这O个袋外数据作为输入，带进之前已经生成的随机森林分类器
	分类器会给出O个数据相应的分类，因为这O条数据的类型是已知的，则用正确的分类与随机森林分类器的结果进行比较，
	统计随机森林分类器分类错误的数目设为X，则袋外数据误差大小=X/O；
	这已经经过证明是无偏估计的，所以在随机森林算法中不需要再进行交叉验证或者单独的测试集来获取测试集误差的无偏估计。 


————————————————————————————————————————————————————————————————————————————————————————————————————————
【RF与GBDT之间的区别与联系？】
	1）相同点：都是由多棵树组成，最终的结果都是由多棵树一起决定。
	2）不同点：
	a 组成随机森林的树可以分类树也可以是回归树，而GBDT只由回归树组成
	b 组成随机森林的树可以并行生成，而GBDT是串行生成
	c 随机森林的结果是多数表决表决的，而GBDT则是多棵树累加之和
	d 随机森林对异常值不敏感，而GBDT对异常值比较敏感
	e 随机森林是减少模型的方差，而GBDT是减少模型的偏差
	f 随机森林不需要进行特征归一化，而GBDT则需要进行特征归一化


————————————————————————————————————————————————————————————————————————————————————————————————————————
【GBDT优缺点】
	优点
	1）预测阶段的计算速度快，树与树之间可并行化计算。
	2）在分布稠密的数据集上，泛化能力和表达能力都很好。
	3）采用决策树作为弱分类器使得GBDT模型具有较好的解释性和鲁棒性，
	   能够自动发现特征间的高阶关系，不需要进行预处理如归一化等。
	局限性
	1）在高维稀疏的数据集上，表现不如支持向量机或者神经网络。
	2）在处理文本分类特征问题上，优势不如处理数值特征时明显。
	3）训练过程需要串行训练，只能在决策树内部采用一些局部并行的手段提高训练速度。


————————————————————————————————————————————————————————————————————————————————————————————————————————
【GBDT和XGBoost比较】
	1）GBDT是机器学习算法，XGBoost是该算法的工程实现。
	2）在使用CART作为基分类器时，XGBoost显式地加入了正则项来控制模型的复杂度，有利于防止过拟合，从而提高模型的泛化能力。
	3）GBDT在模型训练时只使用了代价函数的一阶导数信息，XGBoost对代价函数进行二阶泰勒展开，可以同时使用一阶和二阶导数。
	4）传统的GBDT采用CART作为基分类器，XGBoost支持多种类型的基分类器，比如线性分类器。
	5）传统的GBDT在每轮迭代时使用全部的数据，XGBoost则采用了与随机森林相似的策略，支持对数据进行采样。
	6）传统的GBDT没有设计对缺失值进行处理，XGBoost能够自动学习出缺失值的处理策略。


————————————————————————————————————————————————————————————————————————————————————————————————————————
【常用的基分类器】
	最常用的基分类器是决策树。
		1）可以方便地将样本的权重整合到训练过程中，而不需要使用过采样的方法来调整样本权重。
		2）决策树的表达能力和泛化能力，可以通过调节树的层数来做折中。
		3）数据样本的扰动对于决策树的影响较大，因此不同子样本集合生成的决策树基分类器随机性较大。
		此外，在决策树节点分裂的时候，随机地选择一个特征子集，从中找出最优分裂属性，很好地引入了随机性。
	神经网络模型也适合作为基分类器。
		神经网络模型也比较“不稳定”，还可以通过调整神经元数量、连接方式、网络层数、初始权值等方式引入随机性。


————————————————————————————————————————————————————————————————————————————————————————————————————————
【可否将随机森林中的基分类器，换为线性分类器或K-近邻】
	随机森林属于Bagging。
	Bagging的好处是集成后的方差，比基分类器的方差小。
	Bagging所采用的基分类器，最好是本身对样本分布较为敏感的（即所谓不稳定的分类器）。
	线性分类器或者K-近邻都是较为稳定的分类器，本身方差就不大。
	所以以它们为基分类器不能获得更好的表现，
	甚至可能因为Bagging的采样，导致在训练中更难收敛，增大偏差。


————————————————————————————————————————————————————————————————————————————————————————————————————————

————————————————————————————————————————————————————————————————————————————————————————————————————————


————————————————————————————————————————————————————————————————————————————————————————————————————————



————————————————————————————————————————————————————————————————————————————————————————————————————————




————————————————————————————————————————————————————————————————————————————————————————————————————————
