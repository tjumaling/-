——————————————————————————————————————————————————————————————————————————————————————————————————
【二维数组的查找】
在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。
请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。O(m+n)
class Solution:
    def Find(self, target, array):
    	m, n = len(array), len(array[0])
	i, j = 0, n-1
	while i < m and j >= 0:
		if array[i][j] == target:
			return True
		elif array[i][j] > target:
			j -= 1
		else:
			i += 1
	return False


——————————————————————————————————————————————————————————————————————————————————————————————————
【顺时针打印矩阵】
输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字，
例如，如果输入如下4 X 4矩阵： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 
则依次打印出数字1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10.
class Solution:
	def printMatrix(self, matrix):
		if len(matrix)==0 or len(matrix[0])==0:
			return []
		rows = len(matrix)
		cols = len(matrix[0])
		res = []
		start = 0
		while start*2 < rows and start*2 < cols:
			self.printCircle(matrix, rows, cols, start, res)
			start += 1
		return res
	def printCircle(self, matrix, rows, cols, start, res):
		startX = startY = start
		endX, endY = rows-start-1, cols-start-1
		for i in range(startY, endY+1):
			res.append(matrix[startX][i])
		if startX < endX:
			for i in range(startX+1, endX+1):
				res.append(matrix[i][endY])
		if startX < endX and startY < endY:
			for i in range(endY-1,startY-1,-1):
				res.append(matrix[endX][i])
		if endX - startX > 1 and startY < endY:
			for i in range(endX-1,startX,-1):
				res.append(matrix[i][startY])
    
    
——————————————————————————————————————————————————————————————————————————————————————————————————
【旋转数组的最小数字】*****
把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 
输入一个非减排序的数组的一个旋转，输出旋转数组的最小元素。 
例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。 
NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。
class Solution:
	def minNumberInRotateArray(self, rotateArray):
		m = len(rotateArray)
		if m == 0:
			return 0
		l, r = 0, m-1
		while l < r:
			mid = (r + l) >> 1
			if rotateArray[mid] > rotateArray[r]:
				l = mid + 1
			elif rotateArray[mid] == rotateArray[r]:
				r = r - 1
			else:
				r = mid
		return rotateArray[l]


——————————————————————————————————————————————————————————————————————————————————————————————————
【最小的K个数】
输入n个整数，找出其中最小的K个数。例如输入4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3,4,。
class Solution:
	def GetLeastNumbers_Solution(self, tinput, k):
		if len(tinput) == 0 or k > len(tinput) or k<=0:
			return []
		l, r = 0, len(tinput) - 1
		index = self.Partition(tinput, l, r)
		while index != k - 1:
			if index > k-1:
 				r = index - 1
				index = self.Partition(tinput, l, r)
			else:
				l = index + 1
				index = self.Partition(tinput, l, r)
		return sorted(tinput[:k])
	def Partition(self,numbers,l,r):
		x = numbers[r]
		i = l - 1
		for j in range(l,r):
    			if numbers[j] <= x:
				i += 1
				numbers[i], numbers[j] = numbers[j], numbers[i]
		numbers[i+1], numbers[r] = numbers[r], numbers[i+1]
		return i+1


——————————————————————————————————————————————————————————————————————————————————————————————————
【数组中出现次数超过一半的数字】
数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。例如输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}。
由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。如果不存在则输出0。
class Solution:
	def MoreThanHalfNum_Solution(self, numbers):
		if len(numbers) == 0:
			return 0
		l, r = 0, len(numbers)-1
		index = self.partition(numbers, l, r)
		while index != len(numbers)/2:
			if index > len(numbers)/2:
				r = index - 1
				index = self.partition(numbers, l, r)
			else:
				l = index + 1
				index = self.partition(numbers, l, r)
		res = self.check(numbers, numbers[index])
		if res:
			return numbers[index]
		else:
			return 0
	def partition(self, array, l, r):
		x = array[r]
		i = l - 1
		for j in range(l, r):
			if array[j] <= x:
				i += 1
				array[i], array[j] = array[j], array[i]
		array[i+1], array[r] = array[r], array[i+1]
		return i+1
	def check(self, array, x):
		count = 0
		for i in array:
			if i == x:
				count += 1
		return count > len(array)/2


——————————————————————————————————————————————————————————————————————————————————————————————————
【连续子数组的最大和】
今天测试组开完会后,他又发话了:在古老的一维模式识别中,常常需要计算连续子向量的最大和,当向量全为正数的时候,问题很好解决。
但是,如果向量中包含负数,是否应该包含某个负数,并期望旁边的正数会弥补它呢？
例如:{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8(从第0个开始,到第3个为止)。
给一个数组，返回它的最大连续子序列的和？(子向量的长度至少是1)
class Solution:
	def FindGreatestSumOfSubArray(self, array):
		res = float('-inf')
		dp = [0] * len(array)
		dp[0] = array[0]
		for i in range(1,len(array)):
			if dp[i-1] <= 0:
				dp[i] = array[i]
			else:
				dp[i] = dp[i-1] + array[i]
			res = max(res, dp[i])
		return res


——————————————————————————————————————————————————————————————————————————————————————————————————
【和为S的两个数字】
输入一个递增排序的数组和一个数字S，在数组中查找两个数，使得他们的和正好是S，如果有多对数字的和等于S，输出两个数的乘积最小的。
class Solution:
	def FindNumbersWithSum(self, array, tsum):
		i, j = 0, len(array)-1
		while i<j:
			nsum = array[i] + array[j]
			if nsum == tsum:
				return [array[i], array[j]]
			elif nsum > tsum:
				j -= 1
			else:
				i += 1
		return []


——————————————————————————————————————————————————————————————————————————————————————————————————
【和为S的连续正数序列】
小明很喜欢数学,有一天他在做数学作业时,要求计算出9~16的和,他马上就写出了正确答案是100。
但是他并不满足于此,他在想究竟有多少种连续的正数序列的和为100(至少包括两个数)。
没多久,他就得到另一组连续正数和为100的序列:18,19,20,21,22。
现在把问题交给你,你能不能也很快的找出所有和为S的连续正数序列? 
class Solution:
	def FindContinuousSequence(self, tsum):
		if tsum <= 2:
			return []
		small, big = 1, 2
		nsum = small + big
		res = []
		while small <= tsum/2:
			if nsum == tsum:
				res.append(range(small,big+1))
				nsum -= small                        #注意先更新nsum
				small += 1
			elif nsum > tsum:
				nsum -= small
				small += 1
			else:
				big += 1
				nsum += big
		return res
	
	
——————————————————————————————————————————————————————————————————————————————————————————————————
【数组中重复的数字】
在一个长度为n的数组里的所有数字都在0到n-1的范围内。 数组中某些数字是重复的，但不知道有几个数字是重复的。
也不知道每个数字重复几次。请找出数组中任意一个重复的数字。 
例如，如果输入长度为7的数组{2,3,1,0,2,5,3}，那么对应的输出是第一个重复的数字2。
这里要特别注意~找到任意重复的一个值并赋值到duplication[0]，函数返回True/False
1）排序，O(nlogn)
2）字典，O(n)，需要内存n
3）数组，O(n)
class Solution:
	def duplicate(self, numbers, duplication):
		if len(numbers) <= 1:
			return False
		for i in range(len(numbers)):
			while numbers[i] != i:
				if numbers[i] == numbers[numbers[i]]:
					duplication[0] = numbers[i]
					return True
				temp = numbers[numbers[i]]
				numbers[numbers[i]] = numbers[i]            #注意这里不能一行交换了，因为numbers[i]已经变了
				numbers[i] = temp
		return False
		
		
——————————————————————————————————————————————————————————————————————————————————————————————————
【数组中重复的数字，不修改数组】		
在一个长度为n+1的数组里，所有数字都在1-n之间，所以数组中至少有一个数字是重复的。
请找出数组中任意一个重复数字，但不能修改输入的数组。
1）利用一个辅助数组，方法同上，空间n，时间O(n)。
2）二分查找，时间换空间，函数countRange被调用O(logn)次，每次O(n)，共O(nlogn)。
class Solution:
	def duplication(self, numbers):
		if len(numbers) <= 1:
			return -1
		l, r = 0, len(numbers)-1
		while l <= r:
			mid = (l + r) >> 1
			count = self.countRange(numbers, l, mid)
			if l == mid:
				if count > 1:
					return numbers[l]
				else:
					break
			if count > l - mid + 1:
				r = mid
			else:
				l = mid + 1
		return -1
	def countRange(self, numbers, start, right):
		m = 0
		for i in numbers:
			if i <= right and i >= start:
				m += 1
		return m 


——————————————————————————————————————————————————————————————————————————————————————————————————
【丑数】
把只包含质因子2、3和5的数称作丑数（Ugly Number）。
例如6、8都是丑数，但14不是，因为它包含质因子7。 习惯上我们把1当做是第一个丑数。求按从小到大的顺序的第N个丑数。
class Solution:
	def GetUglyNumber_Solution(self, index):
		if index <= 1:
			return index
		res = [1]
		index2 = index3 = index5 = 0
		count = 1
		while count < index:
			count += 1
			res.append(min(2*res[index2], 3*res[index3], 5*res[index5]))
			if res[-1] == 2*res[index2]:
				index2 += 1
			if res[-1] == 3*res[index3]:
				index3 += 1
			if res[-1] == 5*res[index5]:
				index5 += 1
		return res[index-1]
		
		
		
		
		
		
		
		
