——————————————————————————————————————————————————————————————————————————————————————————————————
【二维数组的查找】
在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。
请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。
class Solution:
    def Find(self, target, array):
    	m, n = len(array), len(array[0])
	i, j = 0, n-1
	while i < m and j >= 0:
		if array[i][j] == target:
			return True
		elif array[i][j] > target:
			j -= 1
		else:
			i += 1
	return False


——————————————————————————————————————————————————————————————————————————————————————————————————
【旋转数组的最小数字】*******************************
把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 
输入一个非减排序的数组的一个旋转，输出旋转数组的最小元素。 
例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。 
NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。
class Solution:
	def minNumberInRotateArray(self, rotateArray):
		m = len(rotateArray)
		if m == 0:
			return 0
		l, r = 0, m-1
		while l < r:
			mid = (r + l) >> 1
			if rotateArray[mid] > rotateArray[r]:
				l = mid + 1
			elif rotateArray[mid] == rotateArray[r]:
				r = r - 1
			else:
				r = mid
		return rotateArray[l]


——————————————————————————————————————————————————————————————————————————————————————————————————



