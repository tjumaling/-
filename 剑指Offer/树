___________________________________________________________________________________________________
【重建二叉树】
输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。
假设输入的前序遍历和中序遍历的结果中都不含重复的数字。
例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。
class Solution:
	def reConstructBinaryTree(self, pre, tin):
		if not pre:
			return None
		node = ListNode(pre[0])
		index = tin.index(pre[0])
		node.left = self.reConstructBinaryTree(pre[1:index+1],tin[:index])
		node.right = self.reConstructBinaryTree(pre[index+1:],tin[index+1:])
		return node


___________________________________________________________________________________________________
【平衡二叉树】
输入一棵二叉树，判断该二叉树是否是平衡二叉树。
class Solution:
	#一般循环，无剪枝
	def IsBalanced_Solution(self, pRoot):
		if pRoot == None:
			return True
		return abs(self.depth(pRoot.left)-self.depth(pRoot.right))<=1 and self.IsBalanced_Solution(pRoot.left) and self.IsBalanced_Solution(pRoot.right)
	def depth(self, pRoot):
		if pRoot == None:
			return 0
		return max(self.depth(pRoot.left),self.depth(pRoot.right)) + 1
	#优化，加剪枝
	def IsBalanced_Solution(self, pRoot):
		return self.helper(pRoot) != -1
	def helper(self, pRoot):
		if pRoot == None:
			return 0
		left = self.helper(pRoot.left)
		if left == -1:
			return -1
		right = self.helper(pRoot.right)
		if right == -1:
			return -1
		return -1 if abs(left-right)>1 else 1 + max(left,right)


___________________________________________________________________________________________________
【从上往下打印二叉树】
class Solution:
	def PrintFromTopToBottom(self, root):
		if root == None:
			return []
		stack = [root]
		res = []
		while stack:
			node = stack.pop(0)
			res.append(node.val)
			if node.left:
				stack.append(node.left)
			if node.right:
				stack.append(node.right)
		return res
	

___________________________________________________________________________________________________
【把二叉树打印成多行】
class Solution:
	def Print(self, pRoot):
		res = []
		if pRoot == None:
			return res
		qu = [pRoot]
		while qu:
			L = []
			for i in range(len(qu)):
				node = qu.pop(0)
				L.append(node.val)
				if node.left:
					qu.append(node.left)
				if node.right:
					qu.append(node.right)
			res.append(L[:])
		return res


___________________________________________________________________________________________________
【按之字形顺序打印二叉树】
请实现一个函数按照之字形打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右至左的顺序打印，
第三行按照从左到右的顺序打印，其他行以此类推。
class Solution:
	def Print(self, pRoot):
		res = []
		if pRoot == None:
			return res
		stack = [pRoot]
		flag = 0
		while stack:
			L = []
			now = []
			flag += 1
			for i in range(len(stack)):
				node = stack.pop()
				now.append(node.val)
				if flag % 2 == 1:
					if node.left:
						L.append(node.left)
					if node.right:
						L.append(node.right)
				else:
					if node.right:
						L.append(node.right)
					if node.left:
						L.append(node.left)
			stack = L
			res.append(now[:])
		return res


___________________________________________________________________________________________________
【二叉树的镜像】
操作给定的二叉树，将其变换为源二叉树的镜像。
class Solution:
	def Mirror(self, root):
		if root == None:
			return root
		qu = [root]
		while qu:
			node = qu.pop(0)
			if node.left == None and node.right == None:
				continue 
			temp = node.left
			node.left = node.right
			node.right = temp
			if node.left:
				qu.append(node.left)
			if node.right:
				qu.append(node.right)
		return root
			

___________________________________________________________________________________________________
【对称的二叉树】
请实现一个函数，用来判断一颗二叉树是不是对称的。注意，如果一个二叉树同此二叉树的镜像是同样的，定义其为对称的。
class Solution:
	#递归
	def isSymmetrical(self, pRoot):
		return self.helper(pRoot,pRoot)
	def helper(self, p1, p2):
		if p1 == None and p2 == None:
			return True
		if p1 == None or p2 == None:
			return False
		if p1.val != p2.val:
			return False
		return self.helper(p1.left, p2.right) and self.helper(p1.right, p2.left）
	#非递归
	def isSymmetrical(self, pRoot):
		if pRoot == None:
			return True
		stack = [pRoot.left, pRoot.right]
		while stack:
			right = stack.pop()
			left = stack.pop()
			if right == None and left == None:
				continue
			if right == None or left == None:
				return False
			if right.val != left.val:
				return False
			stack.append(right.left)
			stack.append(left.right)
			stack.append(right.right)
			stack.append(left.left)
		return True


___________________________________________________________________________________________________
【二叉树中和为某一值的路径】	
输入一颗二叉树的跟节点和一个整数，打印出二叉树中结点值的和为输入整数的所有路径。
路径定义为从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。
(注意: 在返回值的list中，数组长度大的数组靠前)	
class Solution:
	def FindPath(self, root, expectNumber):
		res = []
		trace = []
		self.DFS(root, expectNumber, res, trace)
		return res
	def DFS(self, root, target, res, trace):
		if root == None:
			return 
		trace.append(root.val)
		if root.val == target and root.left==None and root.right==None:
			res.append(trace[:])
		else:
			if root.left:
				self.DFS(root.left, target-root.val, res, trace)
			if root.right:
				self.DFS(root.right, target-root.val, res, trace)
		trace.pop()
	

___________________________________________________________________________________________________
【二叉搜索树与双向链表】
输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。
















___________________________________________________________________________________________________
【二叉树的下一个结点】
给定一个二叉树和其中的一个结点，请找出中序遍历顺序的下一个结点并且返回。
注意，树中的结点不仅包含左右子结点，同时包含指向父结点的指针。
class Solution:
	def GetNext(self, pNode):
		if pNode.right:
			p = pNode.right	
			while p.left:
				p = p.left
			return p
		father = pNode.next
		if father and father.left == pNode:
			return father
		else:
			while father and father.left != pNode:
				pNode = father
				father = father.next
			return father
		
		
___________________________________________________________________________________________________	
【二叉树的深度】
输入一棵二叉树，求该树的深度。
从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度。	
class Solution:
	#BFS
	def TreeDepth(self, pRoot):
		if pRoot == None:
			return 0
		qu = [pRoot]
		depth = 0
		while qu:
			depth += 1
			for i in range(len(qu)):
				node = qu.pop(0)
				if node.left:
					qu.append(node.left)
				if node.right:
					qu.append(node.right)
		return depth
	#DFS递归
	def TreeDepth(self, pRoot):
		if pRoot == None:
			return 0
		return self.helper(pRoot)
	def helper(self, pRoot):
		if pRoot == None:
			return 0
		left = right = 0
		if pRoot.left:
			left = self.helper(pRoot.left)
		if pRoot.right:
			right = self.helper(pRoot.right)
		return max(left, right) + 1
					

___________________________________________________________________________________________________
【二叉搜索树的第k个结点】
给定一棵二叉搜索树，请找出其中的第k小的结点。
例如，（5，3，7，2，4，6，8）中，按结点数值大小顺序第三小结点的值为4。
class Solution:
	def KthNode(self, pRoot, k):






___________________________________________________________________________________________________
【二叉搜索树的后序遍历序列】
输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。
如果是则输出Yes,否则输出No。假设输入的数组的任意两个数字都互不相同。
class Solution:
	def VerifySquenceOfBST(self, sequence):
		if len(sequence) == 0:
			return False
		if len(sequence) == 1:
			return True
		m, n = 0, len(sequence)-1
		index = 0
		while index <= n:
			if sequence[index] >= sequence[n]:
				break
			index += 1
		for j in range(index,n):
			if sequence[j] < sequence[n]:
				return False
		left = right = True
		if sequence[:index]:
			left = self.VerifySquenceOfBST(sequence[:index])
		if sequence[index:n]:
			right = self.VerifySquenceOfBST(sequence[index:n])
		return left and right





