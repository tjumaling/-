————————————————————————————————————————————————————————————————————————————————————————————————————
【删除链表的节点】
给定单向链表的头指针和一个节点指针，定义一个函数在O(1)时间内删除该节点。
从头到尾搜索需要O(n)，把后面的节点复制到当前节点，然后删除后面节点，O(1)
注意：如果是尾节点，需要从头到尾遍历，如果只有一个节点，返回None
class Solution:
	def deleteNode(self, pHead, node):
		if pHead == None or node == None:
			return pHead
		#要删除的不是尾节点
		if node.next != None:
			nextNode = node.next
			node.val = nextNode.val
			node.next = nextNode.next
		#是头结点也是尾节点
		elif pHead == node:
			pHead = None
		#尾节点
		else:
			pre = pHead
			cur = pHead.next
			while cur != node:
				cur = cur.next
				pre = pre.next
			pre.next = cur.next
		return pHead


————————————————————————————————————————————————————————————————————————————————————————————————————
【删除链表中重复的结点】
在一个排序的链表中，存在重复的结点，请删除该链表中重复的结点，重复的结点不保留，返回链表头指针。 
例如，链表1->2->3->3->4->4->5 处理后为 1->2->5
class Solution:
	def deleteDuplication(self, pHead):
		if pHead == None:
			return pHead
		dummy = ListNode(None)
		dummy.next = pHead
		pre = dummy
		p = pHead
		while p and p.next:
			if p.next.val == p.val:
				val = p.val
				while p and p.val == val:
					p = p.next
				pre.next = p
			else:
				pre = p
				p = p.next
		return dummy.next


————————————————————————————————————————————————————————————————————————————————————————————————————
【从尾到头打印链表】
输入一个链表，按链表值从尾到头的顺序返回一个ArrayList。
class Solution:
	#不改变原List
	def printListFromTailToHead(self, listNode):
		stack = []
		while listNode:
			stack.append(listNode.val)
			listNode = listNode.next
		res = []
		while stack:
			res.append(stack.pop())
		return res
	#改变原List
	def printListFromTailToHead(self, listNode):
		if listNode and listNode.next:
			pre = None
			now = listNode
			nxt = listNode.next
			while nxt:
				now.next = pre
				pre = now
				now = nxt
				nxt = now.next
			now.next = pre
		else:
			now = listNode
		res = []
		while now:
			res.append(now.val)
			now = now.next
		return res


————————————————————————————————————————————————————————————————————————————————————————————————————
【反转链表】
输入一个链表，反转链表后，输出新链表的表头。
class Solution:
	def ReverseList(self, pHead):
		if pHead == None or pHead.next == None:
			return pHead
		pre = None
		now = pHead
		nxt = pHead.next
		while nxt:
			now.next = pre
			pre = now
			now = nxt
			nxt = now.next
		now.next = pre
		return now
	

————————————————————————————————————————————————————————————————————————————————————————————————————
【合并两个排序的链表】
输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。
class Solution:
	def Merge(self, pHead1, pHead2):
		p = ListNode(0)
		res = p
		while pHead1 and pHead2:
			if pHead1.val < pHead2.val:
				p.next = pHead1
				pHead1 = pHead1.next
			else:
				p.next = pHead2
				pHead2 = pHead2.next
			p = p.next
		while pHead1:
			p.next = pHead1
			p = p.next 
			pHead1 = pHead1.next
		while pHead2:
			p.next = pHead2
			p = p.next
			pHead2 = pHead2.next
		return res.next


————————————————————————————————————————————————————————————————————————————————————————————————————
【两个链表的第一个公共结点】
输入两个链表，找出它们的第一个公共结点。
class Solution:
	def FindFirstCommonNode(self, pHead1, pHead2):
		m = self.getLen(pHead1)
		n = self.getLen(pHead2)
		if m < n:
			pHead1, pHead2 = pHead2, pHead1
			m, n = n, m
		for i in range(m-n):
			pHead1 = pHead1.next
		while pHead1 and pHead2:
			if pHead1 == pHead2:
				return pHead1
			pHead2 = pHead2.next
			pHead1 = pHead1.next
	def getLen(self, p):
		m = 0
		while p:
			m += 1
			p = p.next
		return m
		
		
————————————————————————————————————————————————————————————————————————————————————————————————————	
【复杂链表的复制】
输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针指向任意一个节点），返回结果为复制后复杂链表的head。
（注意，输出结果中请不要返回参数中的节点引用，否则判题程序会直接返回空）
class Solution:
	def Clone(self, pHead):
		if pHead == None:
			return None
		self.cloneNode(pHead)
		self.connectRandom(pHead)
		return self.reconnect(pHead)
	def cloneNode(self, pHead):
		while pHead:
			node = RandomListNode(pHead.label)
			node.next = pHead.next
			pHead.next = node
			pHead = node.next
	def connectRandom(self, pHead):
		while pHead:
			if pHead.random:
				pHead.next.random = pHead.random.next
			pHead = pHead.next.next
	def reconnect(self, pHead):
		q = pHead
		res = p = pHead.next
		while p and q:
			q.next = p.next
			q = q.next
			if q:
				p.next = q.next
				p = p.next
		return res


————————————————————————————————————————————————————————————————————————————————————————————————————
【链表中倒数第k个结点】
输入一个链表，输出该链表中倒数第k个结点。
class Solution:
	def FindKthToTail(self, head, k):
		fast = slow = head
		while fast and k>0:
			k -= 1
			fast = fast.next
		if k>0:
			return None
		while fast:
			fast = fast.next
			slow = slow.next
		return slow


————————————————————————————————————————————————————————————————————————————————————————————————————
【链表中环的入口结点】
class Solution:
	def EntryNodeOfLoop(self, pHead):
		node = self.haveLoop(pHead)
		if node == None:
			return None
		m = self.countN(node)
		fast = slow = pHead
		while m > 0:
			m -= 1
			fast = fast.next
		while fast != slow:
			fast = fast.next
			slow = slow.next
		return slow
	def haveLoop(self, pHead):
		slow = fast = pHead
		while fast and fast.next:
			slow = slow.next
			fast = fast.next.next
			if slow == fast:
				return slow
		return None
	def countN(self, pHead):
		p = pHead.next
		m = 1                                  #这里搞错了，应该赋值1，不是0
		while p!=pHead:
			p = p.next
			m += 1
		return m

