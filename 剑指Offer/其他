—————————————————————————————————————————————————————————————————————————————————————————————————————
【斐波那契数列】
大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0）。n<=39
class Solution:
	#占内存
	def Fibonacci(self, n):
		res = [0,1]
		for i in range(2,n+1):
			res.append(res[-1]+res[-2])
		return res[n]
	#不占内存
	def Fibonacci(self, n):
		g, f = 0, 1
		for i in range(n):
			f = g + f
			g = f - g
		return g


—————————————————————————————————————————————————————————————————————————————————————————————————————
【跳台阶】
一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。
class Solution:
	#占内存
	def jumpFloor(self, n):
		res = [0, 1, 2]
		for i in range(3,n+1):
			res.append(res[-1] + res[-2])
		return res[n]
	#不占内存
	def jumpFloor(self, n):
		g, f = 1, 2
		for i in range(n-1):
			f = g + f
			g = f - g
		return g
		

—————————————————————————————————————————————————————————————————————————————————————————————————————
【二进制中1的个数】
输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。
class Solution:
	def NumberOf1(self, n):
		flag = 1
		res = 0
		for i in range(32):
			if n & flag:
				res += 1
			flag = flag << 1
		return res
#n = (n-1) & n 相当于把最右面的一个1变成了0


—————————————————————————————————————————————————————————————————————————————————————————————————————
【扑克牌顺子】
LL今天心情特别好,因为他去买了一副扑克牌,发现里面居然有2个大王,2个小王(一副牌原本是54张^_^)...
他随机从中抽出了5张牌,想测测自己的手气,看看能不能抽到顺子,如果抽到的话,他决定去买体育彩票,嘿嘿！！
“红心A,黑桃3,小王,大王,方片5”,“Oh My God!”不是顺子.....LL不高兴了,他想了想,决定大\小 王可以看成任何数字,并且A看作1,J为11,Q为12,K为13。
上面的5张牌就可以变成“1,2,3,4,5”(大小王分别看作2和4),“So Lucky!”。LL决定去买体育彩票啦。 
现在,要求你使用这幅牌模拟上面的过程,然后告诉我们LL的运气如何， 如果牌能组成顺子就输出true，否则就输出false。为了方便起见,你可以认为大小王是0。
class Solution:
	def IsContinuous(self, numbers):
		if len(numbers) != 5:
			return False
		zeroNum = 0
		black = 0
		numbers.sort()
		for i in range(len(numbers)):
			if numbers[i] == 0:
				zeroNum += 1
			if i != 0 and numbers[i-1] != 0:
				if numbers[i] == numbers[i-1]:                 #注意！！！
					return False
				black += numbers[i] - numbers[i-1] - 1
		return black <= zeroNum







