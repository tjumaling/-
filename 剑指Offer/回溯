————————————————————————————————————————————————————————————————————————————————————————————————————————————
【机器人的运动范围】
地上有一个m行和n列的方格。一个机器人从坐标0,0的格子开始移动，每一次只能向左，右，上，下四个方向移动一格，
但是不能进入行坐标和列坐标的数位之和大于k的格子。 
例如，当k为18时，机器人能够进入方格（35,37），因为3+5+3+7 = 18。
但是，它不能进入方格（35,38），因为3+5+3+8 = 19。请问该机器人能够达到多少个格子？
class Solution:
	def movingCount(self, threshold, rows, cols):
		isVisited = [[False for i in range(cols)] for j in range(rows)]
		return self.isLegal(rows, cols, 0, 0, threshold, isVisited)
					
	def isLegal(self, m, n, i, j, threshold, isVisited):
		count = 0
		if i>=0 and i<m and j>=0 and j<n and isVisited[i][j]==False and self.digitSum(i, j, threshold):
			isVisited[i][j] = True
			count = 1 + self.isLegal(m, n, i-1, j, threshold, isVisited) + self.isLegal(m, n, i+1, j, threshold, isVisited) +/
				self.isLegal(m, n, i, j-1, threshold, isVisited) + self.isLegal(m, n, i, j+1, threshold, isVisited)  
		return count
	def digitSum(self, m, n, threshold):
		count = 0
		while m:
			count += m % 10
			m = m // 10
		while n:
			count += n % 10
			n = n // 10
		return count <= threshold
		

————————————————————————————————————————————————————————————————————————————————————————————————————————————
【矩阵中的路径】
请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。
路径可以从矩阵中的任意一个格子开始，每一步可以在矩阵中向左，向右，向上，向下移动一个格子。
如果一条路径经过了矩阵中的某一个格子，则之后不能再次进入这个格子。 
例如 a b c e s f c s a d e e 这样的3 X 4 矩阵中包含一条字符串"bcced"的路径，
但是矩阵中不包含"abcb"路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入该格子。
class Solution:
	def hasPath(self, matrix, rows, cols, path):
		if not matrix or rows<=0 or cols<=0 or not path:
			return False
		visited = [[False for i in range(cols)] for j in range(rows)]
		for i in range(rows):
			for j in range(cols):
				if self.helper(matrix, rows, cols, path, i, j, visited):
					return True
		return False
	def helper(self, matrix, rows, cols, path, i, j, visited):
		if len(path) == 0:
			return True
		haspath = False
		if i>=0 and i<rows and j>=0 and j<cols and matrix[i*cols+j]==path[0] and visited[i][j]==False:
			visited[i][j] = True
			haspath = self.helper(matrix, rows, cols, path[1:], i-1, j, visited) or /
				self.helper(matrix, rows, cols, path[1:], i+1, j, visited) or /
				self.helper(matrix, rows, cols, path[1:], i, j-1, visited) or /
				self.helper(matrix, rows, cols, path[1:], i, j+1, visited)
			if not haspath:
				visited[i][j] = False                   #回溯在这儿呢！
		return haspath
