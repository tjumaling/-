————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
【150】Evaluate Reverse Polish Notation
Input: ["2", "1", "+", "3", "*"]
Output: 9
Explanation: ((2 + 1) * 3) = 9

class Solution(object):
	def evalRPN(self, tokens):
		if not tokens:
			return None
		stack = []
		for i in tokens:
			if i not in '+-*/':
				stack.append(int(i))      #注意输入的不是数字，而是字符串
			else:
				b = stack.pop()
				a = stack.pop()
				if i == '+':
					c = a + b
				elif i == '-':
					c = a - b
				elif i == '*':
					c = a * b 
				else:
					c = int( 1.0 * a / b )
				stack.append(c)
		return stack[-1]


————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
【84】Largest Rectangle in Histogram
Given n non-negative integers representing the histogram's bar height where the width of each bar is 1, 
find the area of largest rectangle in the histogram.
class Solution(object):
	def largestRectangleArea(self, heights):
		stack = []
		res = 0
		for i in heights:
			if stack==[] or i >= stack[-1]:
				stack.append(i)
			else:
				cnt = 0
				while stack and stack[-1] > i:
					cnt += 1
					a = stack.pop()
					res = max(res, a*cnt)
				stack.extend([i]*(cnt+1))
		cnt = 0
		while stack:
			cnt += 1
			a = stack.pop()
			res = max(res, a*cnt)
		return res


————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
【42】Trapping Rain Water
Given n non-negative integers representing an elevation map where the width of each bar is 1, 
compute how much water it is able to trap after raining.
Input: [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
class Solution(object):
	def trap(self, height):
		left = right = res = max_h = 0
		for i in range(len(height)):
			if height[i] > height[max_h]:
				max_h = i
		for i in range(max_h):
			if height[i] > left:
				left = height[i]
			else:
				res += left - height[i]
		for i in range(len(height)-1,max_h,-1):
			if height[i] > right:
				right = height[i]
			else:
				res += right - height[i]
		return res


————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
【32】Longest Valid Parentheses   
Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.
class Solution(object):
	def longestValidParentheses(self, s):
		stack = []
		res = 0
		last = -1
		for i in range(len(s)):
			if s[i] == '(':
				stack.append(i)
			else:
				if not stack:
					last = i
				else:
					stack.pop()
					if not stack:
						res = max(res, i-last)
					else:
						res = max(res, i-stack[-1])
		return res
					

————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
【20】Valid Parentheses
Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.
An input string is valid if:
Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Note that an empty string is also considered valid.
class Solution(object):
	def isValid(self, s):
		stack = []
		for i in s:
			if i == '(':
				stack.append(')')
			elif i == '{':
				stack.append('}')
			elif i == '[':
				stack.append(']')
			else:
				if not stack or i != stack.pop():
					return False
		return stack == []














