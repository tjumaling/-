——————————————————————————————————————————————————————————————————————————————————————————————————————————
【111】Minimum Depth of Binary Tree    
Given a binary tree, find its minimum depth.
The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.

class Solution(object):
	#BFS
	def minDepth(self, root):
		if root == None:
			return 0
		qu = [root]
		res = 1
		while qu:
			for i in range(len(qu)):
				node = qu.pop(0)
				if node.left == None and node.right == None:
					return res
				if node.left:
					qu.append(node.left)
				if node.right:
					qu.append(node.right)
			res += 1
			
	#DFS
	def minDepth(self, root):
		if root == None:
			return 0
		stack = [root]
		res = float('inf')
		while stack:
			node = stack[-1]
			while node.left:
				node = node.left
				stack.append(node)
				
	#递归
	def minDepth(self, root):
		if root == None:
			return 0
		elif root.left == None and root.right:
			return self.minDepth(root.right) + 1
		elif root.right == None and root.left:
			return self.minDepth(root.left) + 1
		else:
			return min(self.minDepth(root.left), self.minDepth(root.right)) + 1
			
			
——————————————————————————————————————————————————————————————————————————————————————————————————————————

