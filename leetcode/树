——————————————————————————————————————————————————————————————————————————————————————————————————————————
【111】Minimum Depth of Binary Tree    
Given a binary tree, find its minimum depth.
The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.
class Solution(object):
	#BFS
	def minDepth(self, root):
		if root == None:
			return 0
		qu = [root]
		res = 1
		while qu:
			for i in range(len(qu)):
				node = qu.pop(0)
				if node.left == None and node.right == None:
					return res
				if node.left:
					qu.append(node.left)
				if node.right:
					qu.append(node.right)
			res += 1
	#递归
	def minDepth(self, root):
		if root == None:
			return 0
		elif root.left == None and root.right:
			return self.minDepth(root.right) + 1
		elif root.right == None and root.left:
			return self.minDepth(root.left) + 1
		else:
			return min(self.minDepth(root.left), self.minDepth(root.right)) + 1
			
			
——————————————————————————————————————————————————————————————————————————————————————————————————————————
【106】Construct Binary Tree from Inorder and Postorder Traversal
Given inorder and postorder traversal of a tree, construct the binary tree.
Note:
You may assume that duplicates do not exist in the tree.
同《剑指Offer》


——————————————————————————————————————————————————————————————————————————————————————————————————————————
【144】Binary Tree Preorder Traversal
Given a binary tree, return the preorder traversal of its nodes' values.
#递归
#非递归


——————————————————————————————————————————————————————————————————————————————————————————————————————————
【145】Binary Tree Postorder Traversal
Given a binary tree, return the postorder traversal of its nodes' values.
#递归
#非递归


——————————————————————————————————————————————————————————————————————————————————————————————————————————
【129】Sum Root to Leaf Numbers
Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.
An example is the root-to-leaf path 1->2->3 which represents the number 123.
Find the total sum of all root-to-leaf numbers.
Note: A leaf is a node with no children.
Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.
An example is the root-to-leaf path 1->2->3 which represents the number 123.
Find the total sum of all root-to-leaf numbers.



——————————————————————————————————————————————————————————————————————————————————————————————————————————


——————————————————————————————————————————————————————————————————————————————————————————————————————————


——————————————————————————————————————————————————————————————————————————————————————————————————————————
