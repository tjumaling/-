——————————————————————————————————————————————————————————————————————————————————————————————————————————
【148】Sort List
Sort a linked list in O(n log n) time using constant space complexity.
#有复杂度限制，因此用归并排序
class Solution(object):
	def sortList(self, head):
		if head == None or head.next == None:
			return head
		mid = self.getMid(head)
		right = self.sortList(mid.next)
		mid.next = None
		left = self.sortList(head)
		return self.merge(left, right)
	def getMid(self, head):
		if head == None:
			return None
		fast = head.next
		slow = head
		while fast and fast.next:
			fast = fast.next.next
			slow = slow.next
		return slow
	def merge(self, p1, p2):
		dummy = ListNode(0)
		cur = dummy
		while p1 and p2:
			if p1.val <= p2.val:
				cur.next = p1
				p1 = p1.next
			else:
				cur.next = p2
				p2 = p2.next
			cur = cur.next
		if p1:
			cur.next = p1
		if p2:
			cur.next = p2
		return dummy.next
		
		
——————————————————————————————————————————————————————————————————————————————————————————————————————————	
【143】Reorder List
Given a singly linked list L: L 0→L 1→…→L n-1→L n,
reorder it to: L 0→L n →L 1→L n-1→L 2→L n-2→…
You must do this in-place without altering the nodes' values.
For example,
Given{1,2,3,4}, reorder it to{1,4,2,3}.
class Solution(object):
	def reorderList(self, head):
		if head == None or head.next == None:
			return head
		mid = self.getMid(head)
		right = self.reverse(mid.next)
		mid.next = None
		return self.merge(head, right)
	def getMid(self, head):
		if head == None:
			return head
		slow, fast = head, head.next
		while fast and fast.next:
			slow = slow.next
			fast = fast.next.next
		return slow
	def reverse(self, head):
		if head == None or head.next == None:
			return head
		pre = None
		cur = head
		nextNode = cur.next
		while cur and cur.next:
			cur.next = pre
			pre = cur
			cur = nextNode
			nextNode = cur.next
		cur.next = pre
		return cur
	def merge(self, p1, p2):
		dummy = ListNode(0)
		cur = dummy
		while p1 and p2:
			cur.next = p1
			p1 = p1.next
			cur = cur.next
			cur.next = p2
			p2 = p2.next
			cur = cur.next
		cur.next = p1
		return dummy.next


——————————————————————————————————————————————————————————————————————————————————————————————————————————
【141】Linked List Cycle
Given a linked list, determine if it has a cycle in it.
class Solution(object):
	def hasCycle(self, head):
		if head == None or head.next == None:
			return False
		fast = slow = head
		while fast and fast.next:
			slow = slow.next
			fast = fast.next.next
			if slow == fast:
				return True
		return False


——————————————————————————————————————————————————————————————————————————————————————————————————————————
【142】Linked List Cycle II
Given a linked list, return the node where the cycle begins. If there is no cycle, return null.
class Solution(object):
	def detectCycle(self, head):
			if head == None or head.next == None:
				return None
			node = self.getNode(head)
			if node == None:
				return None
			m = self.getNum(node)
			fast = slow = head
			while m > 0:
				m -= 1
				fast = fast.next
			while fast != slow:
				fast = fast.next
				slow = slow.next
			return fast
	def getNode(self, head):
		slow = fast = head
		while fast and fast.next:
			slow = slow.next
			fast = fast.next.next
			if slow == fast:
				return slow
		return None
	def getNum(self, node):
		p = node.next
		m = 1
		while p != node:
			p = p.next
			m += 1
		return m
	

——————————————————————————————————————————————————————————————————————————————————————————————————————————
【138】Copy List with Random Pointer
A linked list is given such that each node contains an additional random pointer 
which could point to any node in the list or null.
同《剑指Offer》


——————————————————————————————————————————————————————————————————————————————————————————————————————————
【109】Convert Sorted List to Binary Search Tree
Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.
For this problem, a height-balanced binary tree is defined as a binary tree in which 
the depth of the two subtrees of every node never differ by more than 1.
class Solution(object):
	def sortedListToBST(self, head):
		if head == None:
			return None
		if head.next == None:
			return TreeNode(head.val)
		fast = slow = pre = head
		while fast and fast.next:
			pre = slow
			slow = slow.next
			fast = fast.next.next
		tNode = TreeNode(slow.val)
		tNode.right = self.sortedListToBST(slow.next)
		pre.next = None
		tNode.left = self.sortedListToBST(head)
		return tNode


——————————————————————————————————————————————————————————————————————————————————————————————————————————
【92】Reverse Linked List II *****
Reverse a linked list from position m to n. Do it in one-pass.
Note: 1 ≤ m ≤ n ≤ length of list.
Input: 1->2->3->4->5->NULL, m = 2, n = 4
Output: 1->4->3->2->5->NULL
#在头部插入的方法
class Solution(object):
	def reverseBetween(self, head, m, n):
		pre = dummy = ListNode(0)
		dummy.next = head
		index = 1
		while index < m:
			index += 1
			pre = pre.next
			head = head.next
		while index < n:
			index += 1
			temp = head.next
			head.next = temp.next
			temp.next = pre.next
			pre.next = temp
		return dummy.next


——————————————————————————————————————————————————————————————————————————————————————————————————————————
【86】Partition List ?????
Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.
You should preserve the original relative order of the nodes in each of the two partitions.
class Solution(object):
	def partition(self, head, x):
		p1 = dummy1 = ListNode(0)
		p2 = dummy2 = ListNode(0)
		while head:
			if head.val < x:
				p1.next = head
				p1 = p1.next
			else:
				p2.next = head
				p2 = p2.next
			head = head.next
		p1.next = dummy2.next
		return dummy1.next


——————————————————————————————————————————————————————————————————————————————————————————————————————————
【83】Remove Duplicates from Sorted List
Given a sorted linked list, delete all duplicates such that each element appear only once.
class Solution(object):
	def deleteDuplicates(self, head):
		p = head
		while p:
			if p.next and p.next.val == p.val:
				p.next = p.next.next
			else:
				p = p.next
		return head


——————————————————————————————————————————————————————————————————————————————————————————————————————————
【82】Remove Duplicates from Sorted List II
Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.
class Solution(object):
	def deleteDuplicates(self, head):
		pre = dummy = ListNode(0)
		dummy.next = head
		while head:
			if head.next and head.next.val == head.val:     #先判断是不是要删
				val = head.val
				while head and head.val == val:
					head = head.next
				pre.next = head
			else:
				pre = pre.next
				head = head.next
		return dummy.next


——————————————————————————————————————————————————————————————————————————————————————————————————————————
【21】Merge Two Sorted Lists
Merge two sorted linked lists and return it as a new list. 
The new list should be made by splicing together the nodes of the first two lists.
同《剑指Offer》


——————————————————————————————————————————————————————————————————————————————————————————————————————————
【61】Rotate List
Given a linked list, rotate the list to the right by k places, where k is non-negative.
class Solution(object):
	def rotateRight(self, head, k):
		if head == None or k == 0:
			return head
		p = head
		length = 1
		while p.next:
			length += 1
			p = p.next
		p.next = head
		m = length - k % length
		while m > 0:
			p = p.next
			m -= 1
		res = p.next
		p.next = None
		return res


——————————————————————————————————————————————————————————————————————————————————————————————————————————
【25】Reverse Nodes in k-Group
Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.
k is a positive integer and is less than or equal to the length of the linked list. 
If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.
class Solution(object):
	def reverseKGroup(self, head, k):
		if head == None or k <= 1:
			return head
		pre = dummy = ListNode(0)
		dummy.next = head
		length = 0
		p = head
		while p:
			length += 1
			p = p.next
		for i in range(length//k):
			for i in range(k-1):
				temp = head.next
				head.next = temp.next
				temp.next = pre.next
				pre.next = temp
			pre = head
			head = head.next
		return dummy.next


——————————————————————————————————————————————————————————————————————————————————————————————————————————
【24】Swap Nodes in Pairs    
Given a linked list, swap every two adjacent nodes and return its head.
You may not modify the values in the list's nodes, only nodes itself may be changed.
class Solution(object):
	def swapPairs(self, head):
		if head == None or head.next == None:
			return head
		pre = dummy = ListNode(0)
		dummy.next = head
		curr = head
		while curr and curr.next:
			temp = curr.next
			curr.next = temp.next
			pre.next = temp
			temp.next = curr
			pre = curr
			curr = curr.next
		return dummy.next
		

——————————————————————————————————————————————————————————————————————————————————————————————————————————
【23】Merge k Sorted Lists   *****
Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.
import heapq
class Solution(object):
	def mergeKLists(self, lists):
		if not lists:
			return None
		def my_lt(self, other):
			return self.val < other.val
		setattr(ListNode, "__lt__", my_lt)
		sortedList = curr = ListNode("Dummy")
		h = []
		for head in lists:
			if head:
				h.append(head)
		heapq.heapify(h)
		while h:
			top = heapq.heappop(h)
			curr.next = top
			curr = top
			if top.next:
				heapq.heappush(h, top.next)
		return sortedList.next


——————————————————————————————————————————————————————————————————————————————————————————————————————————
【19】Remove Nth Node From End of List
Given a linked list, remove the n-th node from the end of list and return its head.
#注意要考虑到首节点
class Solution(object):
	def removeNthFromEnd(self, head, n):
		dummy = ListNode(0)
		dummy.next = head
		fast = head
		slow = dummy
		while fast and n > 0:
			fast = fast.next
			n -= 1
		if n != 0:
			return None
		while fast:
			fast = fast.next
			slow = slow.next
		slow.next = slow.next.next
		return dummy.next
		

——————————————————————————————————————————————————————————————————————————————————————————————————————————
【2】Add Two Numbers
You are given two non-empty linked lists representing two non-negative integers. 
The digits are stored in reverse order and each of their nodes contain a single digit. 
Add the two numbers and return it as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.
class Solution(object):
	def addTwoNumbers(self, l1, l2):
		if l1 == None:
			return l2
		if l2 == None:
			return l1
		temp = 0
		res = p = ListNode(0)
		while l1 or l2 or temp:
			if l1:
				temp += l1.val
				l1 = l1.next
			if l2:
				temp += l2.val
				l2 = l2.next
			node = ListNode(temp%10)
			temp = temp // 10
			p.next = node
			p = p.next
		return res.next


——————————————————————————————————————————————————————————————————————————————————————————————————————————





——————————————————————————————————————————————————————————————————————————————————————————————————————————





——————————————————————————————————————————————————————————————————————————————————————————————————————————








