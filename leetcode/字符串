——————————————————————————————————————————————————————————————————————————————————————————————————————————————
【28】Implement strStr()     #KMP算法
Implement strStr().
Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.
Example 1:
Input: haystack = "hello", needle = "ll"
Output: 2
class Solution(object):
	def strStr(self, haystack, needle):
		string, substring = haystack, needle
		m, n = len(string), len(substring)
		i = j = 0
		pNext = self.gene_pnext(substring)
		while i < m and j < n:
			if string[i] == substring[j]:
				i += 1
				j += 1
			elif j != 0:
				j = pNext[j-1]
			else:
				i += 1
		if j == n:
			return i - j
		else:
			return -1
	def gene_pnext(self, s):
		pnext = [0] * len(s)
		index = 0
		i = 1
		while i < len(s):
			if s[i] == s[index]:
				pnext[i] = index + 1
				index += 1
				i += 1
			elif index != 0:
				index = pnext[index-1]
			else:
				pnext[i] = 0
				i += 1
		return pnext
		

——————————————————————————————————————————————————————————————————————————————————————————————————————————————
【131】Palindrome Partitioning  #回溯法
Given a string s, partition s such that every substring of the partition is a palindrome.
Return all possible palindrome partitioning of s.
Example:
Input: "aab"
Output:
[
  ["aa","b"],
  ["a","a","b"]
]
class Solution(object):
	def partition(self, s):
		res = []
		trace = []
		self.DFS(s, res, trace, 0)
		return res
	def DFS(self, s, res, trace, k):
		if k >= len(s):
			res.append(trace[:])
		for i in range(k,len(s)):
			if self.isValid(s, k, i):
				trace.append(s[k:i+1])
				self.DFS(s, res, trace, i+1)
				trace.pop()
	def isValid(self, s, a, b):
		while a < b:
			if s[a] != s[b]:
				return False
			a += 1
			b -= 1
		return True
			

——————————————————————————————————————————————————————————————————————————————————————————————————————————————
【71】Simplify Path
Given an absolute path for a file (Unix-style), simplify it. Or in other words, convert it to the canonical path.
In a UNIX-style file system, a period . refers to the current directory. Furthermore, a double period .. moves the directory up a level. 
For more information, see: Absolute path vs relative path in Linux/Unix
Note that the returned canonical path must always begin with a slash /, and there must be only a single slash / between two directory names. 
The last directory name (if it exists) must not end with a trailing /. 
Also, the canonical path must be the shortest string representing the absolute path.
Input: "/home/"
Output: "/home"
class Solution(object):
	def simplifyPath(self, path):
		path = path.split('/')
		stack = []
		for i in path:
			if i == '' or i == '.':
				continue
			elif i == '..':
				if stack:
					stack.pop()
			else:
				stack.append(i)
		return '/' + '/'.join(stack)


——————————————————————————————————————————————————————————————————————————————————————————————————————————————
【68】Text Justification    
Given an array of words and a width maxWidth, 
format the text such that each line has exactly maxWidth characters and is fully (left and right) justified.
You should pack your words in a greedy approach; that is, pack as many words as you can in each line. 
Pad extra spaces ' ' when necessary so that each line has exactly maxWidth characters.
Extra spaces between words should be distributed as evenly as possible. 
If the number of spaces on a line do not divide evenly between words, 
the empty slots on the left will be assigned more spaces than the slots on the right.
For the last line of text, it should be left justified and no extra space is inserted between words.
Note:
A word is defined as a character sequence consisting of non-space characters only.
Each word's length is guaranteed to be greater than 0 and not exceed maxWidth.
The input array words contains at least one word.
Example 1:
Input:
words = ["This", "is", "an", "example", "of", "text", "justification."]
maxWidth = 16
Output:
[
   "This    is    an",
   "example  of text",
   "justification.  "
]
class Solution(object):
	def fullJustify(self, words, maxWidth):
		m = len(words)
		i = 0
		res = []
		while i < m:
			length = len(words[i])
			j = i
			while j+1 < m and length+len(words[j+1])+(j+1-i) <= maxWidth:
				j += 1
				length += len(words[j])
			space, extra = 1, 0
			if i != j and j != m-1:
				space = (maxWidth - length) // (j - i)
				extra = (maxWidth - length) % (j - i)
			s = words[i]
			for k in range(i+1, j+1):
				if k-i-1 < extra:
					s = s + ' '
				s += ' ' * space + words[k]
			s += ' ' * (maxWidth - len(s))
			res.append(s)
			i = j + 1
		return res


——————————————————————————————————————————————————————————————————————————————————————————————————————————————
【65】Valid Number   *****
Validate if a given string can be interpreted as a decimal number.
Some examples:
"0" => true
" 0.1 " => true
"abc" => false
"1 a" => false
"2e10" => true
" -90e3   " => true
" 1e" => false
"e3" => false
" 6e-1" => true
" 99e2.5 " => false
"53.5e93" => true
" --6 " => false
"-+3" => false
"95a54e53" => false
Note: It is intended for the problem statement to be ambiguous. 
You should gather all requirements up front before implementing one. 
However, here is a list of characters that can be in a valid decimal number:
Numbers 0-9
Exponent - "e"
Positive/negative sign - "+"/"-"
Decimal point - "."
Of course, the context of these characters also matters in the input.
class Solution(object):
	def isNumber(self, s):
		s = s.strip()
		if len(s) == 0:
			return False
		index, m = 0, len(s)
		if s[index] in '+-':
			index += 1
		point = num = 0
		while index < m and s[index] in '0123456789.':
			if s[index] == '.':
				point += 1
			else:
				num += 1
			index += 1
		if point > 1 or num < 1:
			return False
		if index < m and s[index] in 'eE':
			index += 1
			if index < m and s[index] in '+-':
				index += 1
			num = 0
			while index < m and s[index] in '0123456789':
				index += 1
				num += 1
			if num == 0:
				return False
		return index == len(s)
			

——————————————————————————————————————————————————————————————————————————————————————————————————————————————
【67】Add Binary
Given two binary strings, return their sum (also a binary string).
The input strings are both non-empty and contains only characters 1 or 0.
Example 1:
Input: a = "11", b = "1"
Output: "100"
class Solution(object):
	def addBinary(self, a, b):
		m = max(len(a), len(b))
		if m != len(a):
			a = '0' * (m - len(a)) + a
		if m != len(b):
			b = '0' * (m - len(b)) + b
		res = ''
		add = 0
		for i in range(m-1, -1, -1):
			temp = add + int(a[i]) + int(b[i])
			if temp == 0:
				res = '0' + res
				add = 0
			elif temp == 1:
				res = '1' + res
				add = 0
			elif temp == 2:
				res = '0' + res
				add = 1
			else:
				res = '1' + res
				add = 1
		return '1'+res if add else res
		

——————————————————————————————————————————————————————————————————————————————————————————————————————————————
【58】Length of Last Word   
Given a string s consists of upper/lower-case alphabets and empty space characters ' ', return the length of last word in the string.
If the last word does not exist, return 0.
Note: A word is defined as a character sequence consists of non-space characters only.
Example:
Input: "Hello World"
Output: 5
class Solution(object):
	def lengthOfLastWord(self, s):
		if s == '':
			return 0
		for i in range(len(s)-1, -1, -1):
			if s[i].isalpha():
				break
		for j in range(i, -1, -1):
			if s[j] == ' ':
				break
		if j >= 0  and s[j] == ' ':
			return i - j
		return i+1


——————————————————————————————————————————————————————————————————————————————————————————————————————————————
【49】Group Anagrams
Given an array of strings, group anagrams together.
Example:
Input: ["eat", "tea", "tan", "ate", "nat", "bat"],
Output:
[
  ["ate","eat","tea"],
  ["nat","tan"],
  ["bat"]
]
Note:
All inputs will be in lowercase.
The order of your output does not matter.
class Solution(object):
	def groupAnagrams(self, strs):
		dic = {}
		for i in strs:
			key = tuple(sorted(i))
			if key in dic:
				dic[key].append(i)
			else:
				dic[key] = [i]
		return dic.values()
		
		
——————————————————————————————————————————————————————————————————————————————————————————————————————————————
【44】Wildcard Matching
Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*'.
'?' Matches any single character.
'*' Matches any sequence of characters (including the empty sequence).
The matching should cover the entire input string (not partial).
Note:
s could be empty and contains only lowercase letters a-z.
p could be empty and contains only lowercase letters a-z, and characters like ? or *.
class Solution(object):
	#每一次都想到这个方法，但是是不行滴！
	def isMatch(self, s, p):
		if len(s) == 0 and len(p) == 0:
			return True
		if len(s) != 0 and len(p) == 0:
			return False
		if p and s and (p[0] == '?' or p[0] == s[0]):
			return self.isMatch(s[1:], p[1:])
		if p and p[0] == '*':
			return self.isMatch(s[1:], p[1:]) or self.isMatch(s, p[1:]) or self.isMatch(s[1:], p)
		return False
	#DP
	def isMatch(self, s, p):
		m, n = len(s), len(p)
		dp = [[False for i in range(n+1)] for j in range(m+1)]
		dp[0][0] = True
		for j in range(1,n+1):
			if dp[0][j-1]:
				if p[j-1] == '*':
					dp[0][j] = True
				else:
					break
		for i in range(1, m+1):
			for j in range(1, n+1):
				if s[i-1] == p[j-1] or p[j-1] == '?':
					dp[i][j] = dp[i-1][j-1]
				if p[j-1] == '*':
					dp[i][j] = dp[i-1][j] or dp[i][j-1] or dp[i-1][j-1]
		return dp[-1][-1]
	#用大佬的方法
	def isMatch(self, s, p):
		m, n = len(s), len(p)
		i = j = 0 
		indexStar = -1
		indexMatch = 0
		while i < m:
			if j<n and (s[i]==p[j] or p[j]=='?'):
				i += 1
				j += 1
			elif j<n and p[j]=='*':
				indexStar = j
				indexMatch = i
				j += 1
			elif indexStar!=-1:
				j = indexStar + 1
				indexMatch += 1
				i = indexMatch
			else:
				return False
		while j < n and p[j] == '*':
			j += 1
		return j == n
	
	
——————————————————————————————————————————————————————————————————————————————————————————————————————————————
【43】Multiply Strings
Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.
Example 1:
Input: num1 = "2", num2 = "3"
Output: "6"
Example 2:
Input: num1 = "123", num2 = "456"
Output: "56088"
class Solution(object):
	def multiply(self, num1, num2):
		m, n = len(num1), len(num2)
		res = [0] * (m + n - 1)
		for i in range(m-1, -1, -1):
			for j in range(n-1, -1, -1):
				res[m+n-i-j-2] += int(num1[i]) * int(num2[j])
		s = ''
		add = 0
		for i in range(m+n-1):
			temp = add + res[i]
			s = str(temp % 10) + s
			add = temp // 10
		while add:
			s = str(add % 10) + s
			add = add // 10
		for i in range(len(s)):
			if s[i] != '0':
				break
		return s[i:]


——————————————————————————————————————————————————————————————————————————————————————————————————————————————
【38】Count and Say
The count-and-say sequence is the sequence of integers with the first five terms as following:
1.     1
2.     11
3.     21
4.     1211
5.     111221
1 is read off as "one 1" or 11.
11 is read off as "two 1s" or 21.
21 is read off as "one 2, then one 1" or 1211.
Given an integer n where 1 ≤ n ≤ 30, generate the nth term of the count-and-say sequence.
Note: Each term of the sequence of integers will be represented as a string.
class Solution(object):
	def countAndSay(self, n):
		res = '1'
		for i in range(1, n):
			cnt = 0
			index = 0
			last = s = ''
			while index < len(res):
				if last == '' or last == res[index]:
					cnt += 1
				else:
					s = s + str(cnt) + str(last)
					cnt = 1
				last = res[index]
				index += 1
			s = s + str(cnt) + last
			res = s
		return res


——————————————————————————————————————————————————————————————————————————————————————————————————————————————
【30】Substring with Concatenation of All Words
You are given a string, s, and a list of words, words, that are all of the same length. 
Find all starting indices of substring(s) in s that is a concatenation of each word in words exactly once and without any intervening characters.
Example 1:
Input:
  s = "barfoothefoobarman",
  words = ["foo","bar"]
Output: [0,9]
Explanation: Substrings starting at index 0 and 9 are "barfoor" and "foobar" respectively.
The output order does not matter, returning [9,0] is fine too.
class Solution(object):
	def findSubstring(self, s, words):





——————————————————————————————————————————————————————————————————————————————————————————————————————————————
【13】Roman to Integer
Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.
Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
For example, two is written as II in Roman numeral, just two one's added together. 
Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.
Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. 
Instead, the number four is written as IV. Because the one is before the five we subtract it making four. 
The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:
I can be placed before V (5) and X (10) to make 4 and 9. 
X can be placed before L (50) and C (100) to make 40 and 90. 
C can be placed before D (500) and M (1000) to make 400 and 900.
Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.
Example 1:
Input: "III"
Output: 3
Example 2:
Input: "IV"
Output: 4
Example 3:
Input: "IX"
Output: 9
class Solution(object):
	def romanToInt(self, s):
		dic = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}
		res = 0
		for i in range(len(s)):
			if i+1 < len(s) and dic[s[i]] < dic[s[i+1]]:
				res -= dic[s[i]]
			else:
				res += dic[s[i]]
		return res


——————————————————————————————————————————————————————————————————————————————————————————————————————————————
【12】Integer to Roman
class Solution(object):
	def intToRoman(self, num):
		res = ''
		A = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]
		B = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']
		for i in range(len(A)):
			while num >= A[i]:
				num -= A[i]
				res += B[i]
		return res


——————————————————————————————————————————————————————————————————————————————————————————————————————————————
【10】Regular Expression Matching
Given an input string (s) and a pattern (p), implement regular expression matching with support for '.' and '*'.
'.' Matches any single character.
'*' Matches zero or more of the preceding element.
The matching should cover the entire input string (not partial).
Note:
s could be empty and contains only lowercase letters a-z.
p could be empty and contains only lowercase letters a-z, and characters like . or *.
class Solution(object):
	def isMatch(self, s, p):



——————————————————————————————————————————————————————————————————————————————————————————————————————————————
【8】String to Integer (atoi)    
Implement atoi which converts a string to an integer.
The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. 
Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, 
and interprets them as a numerical value.
The string can contain additional characters after those that form the integral number, 
which are ignored and have no effect on the behavior of this function.
If the first sequence of non-whitespace characters in str is not a valid integral number, 
or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.
If no valid conversion could be performed, a zero value is returned.
Note:
Only the space character ' ' is considered as whitespace character.
Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. 
If the numerical value is out of the range of representable values, INT_MAX (231 − 1) or INT_MIN (−231) is returned.
Example 1:
Input: "42"
Output: 42
Example 2:
Input: "   -42"
Output: -42
Explanation: The first non-whitespace character is '-', which is the minus sign.
             Then take as many numerical digits as possible, which gets 42.
Example 3:
Input: "4193 with words"
Output: 4193
Explanation: Conversion stops at digit '3' as the next character is not a numerical digit.
Example 4:
Input: "words and 987"
Output: 0
Explanation: The first non-whitespace character is 'w', which is not a numerical 
             digit or a +/- sign. Therefore no valid conversion could be performed.
Example 5:
Input: "-91283472332"
Output: -2147483648
Explanation: The number "-91283472332" is out of the range of a 32-bit signed integer.
             Thefore INT_MIN (−231) is returned.
class Solution(object):
	def myAtoi(self, str):






——————————————————————————————————————————————————————————————————————————————————————————————————————————————
【6ZigZag Conversion   
The string "PAYPALISHIRING" is written in a zigzag pattern on a given number of rows like this: 
(you may want to display this pattern in a fixed font for better legibility)
P   A   H   N
A P L S I I G
Y   I   R
And then read line by line: "PAHNAPLSIIGYIR"
Write the code that will take a string and make this conversion given a number of rows:
string convert(string s, int numRows);
Example 1:
Input: s = "PAYPALISHIRING", numRows = 3
Output: "PAHNAPLSIIGYIR"
Example 2:
Input: s = "PAYPALISHIRING", numRows = 4
Output: "PINALSIGYAHRPI"
Explanation:
P     I    N
A   L S  I G
Y A   H R
P     I
class Solution(object):
	def convert(self, s, numRows):






——————————————————————————————————————————————————————————————————————————————————————————————————————————————
【5】Longest Palindromic Substring
Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.
Example 1:
Input: "babad"
Output: "bab"
Note: "aba" is also a valid answer.
Example 2:
Input: "cbbd"
Output: "bb"
class Solution(object):
	#DP O(n2)
	def longestPalindrome(self, s):
		m = len(s)
		dp = [[False for i in range(m)] for j in range(m)]
		start, end, maxLen = 0, 1, 0
		for j in range(m):
			dp[j][j] = True
			for i in range(j):
				if s[i]==s[j] and (j-i<=1 or dp[i+1][j-1]):
					dp[i][j] = True
					if j - i + 1 > maxLen:
						start = i
						end = j+1
						maxLen = j + 1 - i
		return s[start:end]
	#中心扩展法 O(n2)
	def longestPalindrome(self, s):
		m = len(s)
		start, end, maxLen = 0, 1, 0
		for i in range(m):
			for j in range(2):
				left = i
				right = i + j
				if right == m:
					break
				while left>=0 and right<m and s[left]==s[right]:
					left -= 1
					right += 1
				left += 1
				if maxLen < right - left:
					start = left
					end = right
					maxLen = right - left
		return s[start:end]
	#马拉车 O(n)
	def longestPalindrome(self, s):





——————————————————————————————————————————————————————————————————————————————————————————————————————————————
【3】Longest Substring Without Repeating Characters
Given a string, find the length of the longest substring without repeating characters.
Example 1:
Input: "abcabcbb"
Output: 3 
Explanation: The answer is "abc", with the length of 3. 
class Solution(object):
	def lengthOfLongestSubstring(self, s):
		if len(s) <= 1:
			return len(s)
		res = 0
		left = 0
		for i in range(1, len(s)):
			if s[i] in s[left:i]:
				res = max(res, i - left)
				while s[left] != s[i]:
					left += 1
				left += 1
		res = max(res, i-left)
		return res
			




