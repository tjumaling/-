——————————————————————————————————————————————————————————————————————————————————————————————————————
【121】Best Time to Buy and Sell Stock
Say you have an array for which the ith element is the price of a given stock on day i.
If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), 
design an algorithm to find the maximum profit.
Note that you cannot sell a stock before you buy one.
class Solution(object):
	def maxProfit(self, prices):
		buy = float('-inf')
		res = 0
		for i in range(len(prices)):
			res = max(res, prices[i] + buy)
			buy = max(buy, -prices[i])
		return res
		
		
——————————————————————————————————————————————————————————————————————————————————————————————————————
【122】Best Time to Buy and Sell Stock II
Say you have an array for which the ith element is the price of a given stock on day i.
Design an algorithm to find the maximum profit. You may complete as many transactions as you like 
(i.e., buy one and sell one share of the stock multiple times).
Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).
class Solution(object):
	def maxProfit(self, prices):
		res = 0
		for i in range(1, len(prices)):
			if prices[i] > prices[i-1]:
				res += prices[i] - prices[i-1]
		return res


——————————————————————————————————————————————————————————————————————————————————————————————————————
【123】Best Time to Buy and Sell Stock III
Say you have an array for which the ith element is the price of a given stock on day i.
Design an algorithm to find the maximum profit. You may complete at most two transactions.
class Solution(object):
	def maxProfit(self, prices):
		buy1 = buy2 = float('-inf')
		sale1 = sale2 = 0
		for i in prices:
			buy1 = max(buy1, -i)
			sale1 = max(sale1, buy1 + i)
			buy2 = max(buy2, sale1 - i)
			sale2 = max(sale2, buy2 + i)
		return sale2


——————————————————————————————————————————————————————————————————————————————————————————————————————
【130】Surrounded Regions
Given a 2D board containing 'X' and 'O' (the letter O), capture all regions surrounded by 'X'.
A region is captured by flipping all 'O's into 'X's in that surrounded region.
Example:
X X X X
X O O X
X X O X
X O X X
After running your function, the board should be:
X X X X
X X X X
X X X X
X O X X
class Solution(object):
	def solve(self, board):
		if not board or len(board) == 0:
			return 
		m, n = len(board), len(board[0])
		direction = [[1,0], [-1,0], [0,1], [0,-1]]
		for i in range(m):
			if board[i][0] == 'O':
				self.DFS(board, i, 0, direction)
			if board[i][n-1] == 'O':
				self.DFS(board, i, n-1, direction)
		for i in range(n):
			if board[0][i] == 'O':
				self.DFS(board, 0, i, direction)
			if board[m-1][i] == 'O':
				self.DFS(board, m-1, i, direction)
		for i in range(m):
			for j in range(n):
				if board[i][j] == 'O':
					board[i][j] = 'X'
				elif board[i][j] == '*':
					board[i][j] = 'O'
		return
	def DFS(self, board, row, col, direction):
		if board[row][col] == 'O':
			board[row][col] = '*'
			for i in range(len(direction)):
				r = row + direction[i][0]
				c = col + direction[i][1]
				if r>=0 and r<len(board) and c>=0 and c<len(board[0]) and board[r][c]=='O':
					self.DFS(board, r, c, direction)


——————————————————————————————————————————————————————————————————————————————————————————————————————
【128】Longest Consecutive Sequence
Given an unsorted array of integers, find the length of the longest consecutive elements sequence.
Your algorithm should run in O(n) complexity.
class Solution(object):
	def longestConsecutive(self, nums):
		nums = set(nums)
		res = 0
		for i in nums:
			if i-1 in nums:
				continue
			cur = i
			cnt = 0
			while cur in nums:
				cnt += 1
				cur += 1
			res = max(cnt, res)
		return res
			

——————————————————————————————————————————————————————————————————————————————————————————————————————
【88】Merge Sorted Array
Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.
Note:
The number of elements initialized in nums1 and nums2 are m and n respectively.
You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2.
class Solution(object):
	def merge(self, nums1, m, nums2, n):
		k = m + n - 1
		i, j = m-1, n-1
		while i>=0 and j>=0:
			if nums1[i] >= nums2[j]:
				nums1[k] = nums1[i]
				i -= 1
			else:
				nums1[k] = nums2[j]
				j -= 1
			k -= 1
		if j >= 0:
			nums1[:j] = nums2[:j]
		return 


——————————————————————————————————————————————————————————————————————————————————————————————————————
【26】Remove Duplicates from Sorted Array
Given a sorted array nums, remove the duplicates in-place such that each element appear only once and return the new length.
Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.
class Solution(object):
	def removeDuplicates(self, nums):
		index = 0
		for i in range(1,len(nums)):
			if nums[i] == nums[index]:
				continue
			else:
				index += 1
				nums[index] = nums[i]
		return index + 1


——————————————————————————————————————————————————————————————————————————————————————————————————————
【80】Remove Duplicates from Sorted Array II
Given a sorted array nums, remove the duplicates in-place such that duplicates appeared at most twice and return the new length.
Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.
class Solution(object):
	def removeDuplicates(self, nums):
		if len(nums) <= 2:
			return len(nums)
		index = 2
		for i in range(2, len(nums)):
			if nums[i] != nums[index-2]:
				nums[index] = nums[i]
				index += 1
		return index
		
		
——————————————————————————————————————————————————————————————————————————————————————————————————————
【75】Sort Colors
Given an array with n objects colored red, white or blue, 
sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white and blue.
Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.
Note: You are not suppose to use the library's sort function for this problem.
class Solution(object):
	def sortColors(self, nums):
		zero, two = 0, len(nums)-1
		i = 0
		while i <= two:
			if nums[i] == 0:
				nums[i], nums[zero] = nums[zero], nums[i]
				zero += 1
			elif nums[i] == 2:
				nums[i], nums[two] = nums[two], nums[i]
				two -= 1
			else:
				i += 1
			

——————————————————————————————————————————————————————————————————————————————————————————————————————
【74】Search a 2D Matrix
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:
Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
同《剑指Offer》


——————————————————————————————————————————————————————————————————————————————————————————————————————
【66】Plus One
Given a non-empty array of digits representing a non-negative integer, plus one to the integer.
The digits are stored such that the most significant digit is at the head of the list, 
and each element in the array contain a single digit.
You may assume the integer does not contain any leading zero, except the number 0 itself.
class Solution(object):
	def plusOne(self, digits):
		add = 1
		for i in range(len(digits)-1, -1, -1):
			temp = add + digits[i]
			digits[i] = temp % 10
			add = temp // 10
		if add > 0:
			return [add] + digits
		return digits


——————————————————————————————————————————————————————————————————————————————————————————————————————
【59】Spiral Matrix II
Given a positive integer n, generate a square matrix filled with elements from 1 to n2 in spiral order.
class Solution(object):
	def generateMatrix(self, n):
		array = [[0 for i in range(n)] for i in range(n)]
		cnt = 1
		up = left = 0
		down = right = n-1
		while cnt <= n**2:
			for i in range(left, right+1):
				array[up][i] = cnt
				cnt += 1
			for i in range(up+1, down+1):
				array[i][right] = cnt
				cnt += 1
			for i in range(right-1, left-1, -1):
				array[down][i] = cnt
				cnt += 1
			for i in range(down-1, up, -1):
				array[i][left] = cnt
				cnt += 1
			left += 1
			right -= 1
			up += 1
			down -= 1
		return array


——————————————————————————————————————————————————————————————————————————————————————————————————————
【56】Merge Intervals
Given a collection of intervals, merge all overlapping intervals.
class Solution(object):
	def merge(self, intervals):
		if len(intervals) <= 1:
			return intervals
		intervals.sort(key = lambda x: x.start)
		res = [intervals[0]]
		for i in range(1, len(res)):
			itv = intervals[i]
			if itv.start > res[-1].end:
				res.append(itv)
			else:
				last = res.pop()
				last.end = max(last.end, itv.end)
				res.append(last)
		return res
		

——————————————————————————————————————————————————————————————————————————————————————————————————————





——————————————————————————————————————————————————————————————————————————————————————————————————————





——————————————————————————————————————————————————————————————————————————————————————————————————————


