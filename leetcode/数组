——————————————————————————————————————————————————————————————————————————————————————————————————————
【121】Best Time to Buy and Sell Stock
Say you have an array for which the ith element is the price of a given stock on day i.
If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), 
design an algorithm to find the maximum profit.
Note that you cannot sell a stock before you buy one.
class Solution(object):
	def maxProfit(self, prices):
		buy = float('-inf')
		res = 0
		for i in range(len(prices)):
			res = max(res, prices[i] + buy)
			buy = max(buy, -prices[i])
		return res
		
		
——————————————————————————————————————————————————————————————————————————————————————————————————————
【122】Best Time to Buy and Sell Stock II
Say you have an array for which the ith element is the price of a given stock on day i.
Design an algorithm to find the maximum profit. You may complete as many transactions as you like 
(i.e., buy one and sell one share of the stock multiple times).
Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).
class Solution(object):
	def maxProfit(self, prices):
		res = 0
		for i in range(1, len(prices)):
			if prices[i] > prices[i-1]:
				res += prices[i] - prices[i-1]
		return res


——————————————————————————————————————————————————————————————————————————————————————————————————————
【123】Best Time to Buy and Sell Stock III
Say you have an array for which the ith element is the price of a given stock on day i.
Design an algorithm to find the maximum profit. You may complete at most two transactions.
class Solution(object):
	def maxProfit(self, prices):
		buy1 = buy2 = float('-inf')
		sale1 = sale2 = 0
		for i in prices:
			buy1 = max(buy1, -i)
			sale1 = max(sale1, buy1 + i)
			buy2 = max(buy2, sale1 - i)
			sale2 = max(sale2, buy2 + i)
		return sale2


——————————————————————————————————————————————————————————————————————————————————————————————————————
【130】Surrounded Regions
Given a 2D board containing 'X' and 'O' (the letter O), capture all regions surrounded by 'X'.
A region is captured by flipping all 'O's into 'X's in that surrounded region.
Example:
X X X X
X O O X
X X O X
X O X X
After running your function, the board should be:
X X X X
X X X X
X X X X
X O X X
class Solution(object):
	def solve(self, board):
		if not board or len(board) == 0:
			return 
		m, n = len(board), len(board[0])
		direction = [[1,0], [-1,0], [0,1], [0,-1]]
		for i in range(m):
			if board[i][0] == 'O':
				self.DFS(board, i, 0, direction)
			if board[i][n-1] == 'O':
				self.DFS(board, i, n-1, direction)
		for i in range(n):
			if board[0][i] == 'O':
				self.DFS(board, 0, i, direction)
			if board[m-1][i] == 'O':
				self.DFS(board, m-1, i, direction)
		for i in range(m):
			for j in range(n):
				if board[i][j] == 'O':
					board[i][j] = 'X'
				elif board[i][j] == '*':
					board[i][j] = 'O'
		return
	def DFS(self, board, row, col, direction):
		if board[row][col] == 'O':
			board[row][col] = '*'
			for i in range(len(direction)):
				r = row + direction[i][0]
				c = col + direction[i][1]
				if r>=0 and r<len(board) and c>=0 and c<len(board[0]) and board[r][c]=='O':
					self.DFS(board, r, c, direction)


——————————————————————————————————————————————————————————————————————————————————————————————————————
【128】Longest Consecutive Sequence
Given an unsorted array of integers, find the length of the longest consecutive elements sequence.
Your algorithm should run in O(n) complexity.
class Solution(object):
	def longestConsecutive(self, nums):
		i = 0
		while i < len(nums):
			if nums[i] == i+1：

			

——————————————————————————————————————————————————————————————————————————————————————————————————————
