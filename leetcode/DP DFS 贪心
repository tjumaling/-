————————————————————————————————————————————————————————————————————————————————————————————————————
【134】Gas Station
There are N gas stations along a circular route, where the amount of gas at station i is gas[i].
You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from station i to its next station (i+1).
You begin the journey with an empty tank at one of the gas stations.
Return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1.
Input: 
gas  = [1,2,3,4,5]
cost = [3,4,5,1,2]
Output: 3
#贪心算法，从最后一个出发，第一个结束，如果油不够，需要start-=1，加油，如果油充足，end+=1，耗油
class Solution(object):
	def canCompleteCircuit(self, gas, cost):
		start = len(gas)-1
		end = 0
		tank = gas[start] - cost[start]
		while end < start:
			if tank >= 0:
				tank += gas[end] - cost[end]
				end += 1
			else:
				start -= 1
				tank += gas[start] - cost[start]
		return start if tank >= 0 else -1		


————————————————————————————————————————————————————————————————————————————————————————————————————
【84】Largest Rectangle in Histogram
Given n non-negative integers representing the histogram's bar height where the width of each bar is 1, 
find the area of largest rectangle in the histogram.
Input: [2,1,5,6,2,3]
Output: 10
class Solution(object):
	def largestRectangleArea(self, heights):
		stack = []
		res = 0
		for i in heights:
			if stack==[] or stack[-1]<=i:
				stack.append(i)
			else:
				cnt = 0
				while stack and stack[-1]>i:
					a = stack.pop()
					cnt += 1
					res = max(res, cnt*a)
				stack.extend([i]*(cnt+1))
		cnt = 0
		while stack:
			cnt += 1
			a = stack.pop()
			res = max(res, a*cnt)
		return res


————————————————————————————————————————————————————————————————————————————————————————————————————
【85】Maximal Rectangle
Given a 2D binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.
class Solution(object):
	def maximalRectangle(self, matrix):
		if not matrix or len(matrix)==0 or len(matrix[0])==0:
			return 0
		m, n = len(matrix), len(matrix[0])
		h = [0 for i in range(n)]
		res = 0
		for i in range(m):
			stack = []
			for j in range(n):
				if matrix[i][j] == '1':
					h[j] += 1
				else:
					h[j] = 0
			for j in range(n):
				if stack==[] or stack[-1]<=h[j]:
					stack.append(h[j])
				else:
					cnt = 0
					while stack and stack[-1] > h[j]:
						cnt += 1
						a = stack.pop()
						res = max(res, a*cnt)
					stack.extend([h[j]]*(cnt+1))
			cnt = 0
			while stack:
				cnt += 1
				a = stack.pop()
				res = max(res, a*cnt)
		return res


————————————————————————————————————————————————————————————————————————————————————————————————————
【55】Jump Game  
Given an array of non-negative integers, you are initially positioned at the first index of the array.
Each element in the array represents your maximum jump length at that position.
Determine if you are able to reach the last index.
Input: [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.
class Solution(object):
	def canJump(self, nums):
		if len(nums) == 0:
			return False
		farest = 0
		for i in range(len(nums)):
			if i > farest:
				return False
			farest = max(farest, i+nums[i])
		return True


————————————————————————————————————————————————————————————————————————————————————————————————————
【45】Jump Game II *****
Given an array of non-negative integers, you are initially positioned at the first index of the array.
Each element in the array represents your maximum jump length at that position.
Your goal is to reach the last index in the minimum number of jumps.
Input: [2,3,1,1,4]
Output: 2
class Solution(object):
	def jump(self, nums):
		step = maxstep = laststep = 0
		for i in range(len(nums)):
			if i > laststep:
				step += 1
				laststep = maxstep
			maxstep = max(maxstep, i+nums[i])
		return step
		

————————————————————————————————————————————————————————————————————————————————————————————————————
【139】Word Break
Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, 
determine if s can be segmented into a space-separated sequence of one or more dictionary words.
Note:
The same word in the dictionary may be reused multiple times in the segmentation.
You may assume the dictionary does not contain duplicate words.
Example 1:
Input: s = "leetcode", wordDict = ["leet", "code"]
Output: true
class Solution(object):
	def wordBreak(self, s, wordDict):
		dp = [False for i in range(len(s)+1)]
		dp[0] = True
		for i in range(1,len(s)+1):
			for j in range(i):
				if dp[j] and s[j:i] in wordDict:
					dp[i] = True
					break
		return dp[-1]


————————————————————————————————————————————————————————————————————————————————————————————————————
【140】Word Break II    
Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, 
add spaces in s to construct a sentence where each word is a valid dictionary word. 
Return all such possible sentences.
Note:
The same word in the dictionary may be reused multiple times in the segmentation.
You may assume the dictionary does not contain duplicate words.
Input:
s = "catsanddog"
wordDict = ["cat", "cats", "and", "sand", "dog"]
Output:
[
  "cats and dog",
  "cat sand dog"
]
class Solution(object):
	def wordBreak(self, s, wordDict):
		memo = {}
		return self.DFS(s, wordDict, memo)
	def DFS(self, s, wordDict, memo):
		if len(s) == 0:
			return []
		if s in memo:
			return memo[s]
		res = []
		if s in wordDict:
			res.append(s)
		for i in range(1,len(s)):
			partition = s[:i]
			if partition in wordDict:
				for other in self.DFS(s[i:], wordDict, memo):
					res.append(partition + ' ' + other)
		memo[s] = res
		return res
					

————————————————————————————————————————————————————————————————————————————————————————————————————
【135】Candy
There are N children standing in a line. Each child is assigned a rating value.
You are giving candies to these children subjected to the following requirements:
Each child must have at least one candy.
Children with a higher rating get more candies than their neighbors.
What is the minimum candies you must give?
Example 1:
Input: [1,0,2]
Output: 5
Explanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.
class Solution(object):
	def candy(self, ratings):
		if len(ratings) == 0:
			return 0
		dp = [1] * len(ratings)
		for i in range(1,len(ratings)):
			if ratings[i] > ratings[i-1]:
				dp[i] = dp[i-1] + 1
		for i in range(len(ratings)-2,-1,-1):
			if ratings[i] > ratings[i+1] and dp[i] <= dp[i+1]:
				dp[i] = dp[i+1] + 1
		return sum(dp)
		
		
————————————————————————————————————————————————————————————————————————————————————————————————————
【132】Palindrome Partitioning II    ??????Time Limit
Given a string s, partition s such that every substring of the partition is a palindrome.
Return the minimum cuts needed for a palindrome partitioning of s.
Example:
Input: "aab"
Output: 1
Explanation: The palindrome partitioning ["aa","b"] could be produced using 1 cut.
class Solution(object):
	def minCut(self, s):
		if self.isValid(s):
			return 0
		dp = [i for i in range(len(s))]
		for i in range(len(s)):
			if self.isValid(s[:i+1]):
				dp[i] = 0
				continue
			else:
				for j in range(1, i+1):
					if self.isValid(s[j:i+1]):
						dp[i] = min(dp[i], dp[j-1]+1)
					else:
						dp[i] = min(dp[i], dp[j-1]+i-j+1)
		return dp[-1]
	def isValid(self, s):
		if len(s) <= 1:
			return True
		m, n = 0, len(s)-1
		while m <= n:
			if s[m] != s[n]:
				return False
			m += 1
			n -= 1
		return True


————————————————————————————————————————————————————————————————————————————————————————————————————
【120】Triangle
Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.
For example, given the following triangle
[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]
The minimum path sum from top to bottom is 11 
class Solution(object):
	#修改原数组
	def minimumTotal(self, triangle):
		m = len(triangle)
		for i in range(m-2,-1,-1):
			for j in range(len(triangle[i])):
				triangle[i][j] += min(triangle[i+1][j], triangle[i+1][j+1])
		return triangle[0][0]
		
		
————————————————————————————————————————————————————————————————————————————————————————————————————
【115】Distinct Subsequences       *****
Given a string S and a string T, count the number of distinct subsequences of S which equals T.
A subsequence of a string is a new string which is formed from the original string 
by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. 
(ie, "ACE" is a subsequence of "ABCDE" while "AEC" is not).
Input: S = "rabbbit", T = "rabbit"
Output: 3
Explanation:
As shown below, there are 3 ways you can generate "rabbit" from S.
(The caret symbol ^ means the chosen letters)
rabbbit
^^^^ ^^
rabbbit
^^ ^^^^
rabbbit
^^^ ^^^
class Solution(object):
	#dp[i][j]表示s[:i]中t[:i]出现的个数
	#dp[*][0]=1
	def numDistinct(self, s, t):
		m, n = len(s), len(t)
		dp = [[0 for i in range(n+1)] for j in range(m+1)]
		for i in range(m+1):
			dp[i][0] = 1
		for j in range(n+1):
			for i in range(1,m+1):
				if s[i-1] == t[j-1]:
					dp[i][j] = dp[i-1][j-1] + dp[i-1][j]
				else:
					dp[i][j] = dp[i-1][j]
		return dp[-1][-1]


————————————————————————————————————————————————————————————————————————————————————————————————————
【97】Interleaving String   ？？？？？？？
Given s1, s2, s3, find whether s3 is formed by the interleaving of s1 and s2.
Example 1:
Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbcbcac"
Output: true
Example 2:
Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbbaccc"
Output: false
class Solution(object):
	def isInterleave(self, s1, s2, s3):
		if len(s1) + len(s2) != len(s3):
			return False
		m, n = len(s1), len(s2)
		dp = [[False for i in range(n+1)] for j in range(m+1)]
		
		
————————————————————————————————————————————————————————————————————————————————————————————————————
【93】Restore IP Addresses
#所以说IP地址总共有四段，每一段可能有一位，两位或者三位，范围是[0, 255]，所以当某段是三位时，我们要判断其是否越界（>255)，
还有一点很重要的是，当只有一位时，0可以成某一段，如果有两位或三位时，像 00，01，001，011，000等都是不合法的。
Given a string containing only digits, restore it by returning all possible valid IP address combinations.
Input: "25525511135"
Output: ["255.255.11.135", "255.255.111.35"]
class Solution(object):
	def restoreIpAddresses(self, s):
		res = []
		trace = []
		self.DFS(s, 0, res, trace)
		return res
	def DFS(self, s, m, res, trace):
		if len(s)-m > 3*(4-len(trace)):
			return
		if len(s)-m < 4-len(trace):
			return 
		if m == len(s) and len(trace) == 4:
			res.append('.'.join(trace))
		for i in range(3):
			if self.isValid(s[m:m+i+1]):
				trace.append(s[m:m+i+1])
				self.DFS(s, m+i+1, res, trace)
				trace.pop()
	def isValid(self, s):
		if len(s)<1 or len(s)>3:
			return False
		if len(s)!= 1 and s[0]=='0':
			return False
		if len(s)==3 and s>'255':
			return False
		return True
		

————————————————————————————————————————————————————————————————————————————————————————————————————
【69】Sqrt(x)
Implement int sqrt(int x).
Compute and return the square root of x, where x is guaranteed to be a non-negative integer.
Since the return type is an integer, the decimal digits are truncated and only the integer part of the result is returned.
#牛顿迭代法：x(n+1) = 0.5 * ( x(n) + num/x(n) )
计算x2 = n的解，令f(x)=x2-n，相当于求解f(x)=0的解。
首先取x0，如果x0不是解，做一个经过(x0,f(x0))这个点的切线，与x轴的交点为x1。
同样的道理，如果x1不是解，做一个经过(x1,f(x1))这个点的切线，与x轴的交点为x2。以此类推。
class Solution(object):
	def mySqrt(self, x):
		res = x
		while res * res > x:
			res = int((res + 1.0*x/res) / 2.0)
		return res


————————————————————————————————————————————————————————————————————————————————————————————————————
【50】Pow(x, n)
Implement pow(x, n), which calculates x raised to the power n (xn).
class Solution(object):
	def myPow(self, x, n):
		if x == 0:
			return 0
		if n == 0:
			return 1
		if n < 0:
			return 1.0 / self.myPow(x, -n)
		base = x
		res = 1
		while n:
			if n & 1:
				res *= base
			base *= base
			n = n >> 1
		return res


————————————————————————————————————————————————————————————————————————————————————————————————————
【46】Permutations
Given a collection of distinct integers, return all possible permutations.
Example:
Input: [1,2,3]
Output:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]
class Solution(object):
	def permute(self, nums):
		nums.sort()
		res = []
		self.DFS(nums, 0, res)
		return res
	def DFS(self, nums, m, res):
		if m == len(nums):
			res.append(nums[:])
		for i in range(m, len(nums)):
			nums[m], nums[i] = nums[i], nums[m]
			self.DFS(nums, m+1, res)
			nums[m], nums[i] = nums[i], nums[m]
	#为了和下题统一
	def permute(self, nums):
		nums.sort()
		res = []
		trace = []
		self.DFS(nums, res, trace)
		return res
	def DFS(self, nums, res, trace):
		if len(trace) == len(nums):
			res.append(trace[:])
		for i in range(len(nums)):
			if nums[i] not in trace:
				trace.append(nums[i])
				self.DFS(nums, res, trace)
				trace.pop()
			

————————————————————————————————————————————————————————————————————————————————————————————————————
【47】Permutations II
Given a collection of numbers that might contain duplicates, return all possible unique permutations.
Example:
Input: [1,1,2]
Output:
[
  [1,1,2],
  [1,2,1],
  [2,1,1]
]
class Solution(object):
	def permuteUnique(self, nums):
		nums.sort()
		res = []
		trace = []
		visited = [False] * len(nums)
		self.DFS(nums, res, trace, visited)
		return res
	def DFS(self, nums, res, trace, visited):
		if len(trace) == len(nums):
			res.append(trace[:])
		for i in range(len(nums)):
			if visited[i]==False:
				if i>0 and nums[i]==nums[i-1] and visited[i-1]==False:
					continue
				trace.append(nums[i])
				visited[i] = True
				self.DFS(nums, res, trace, visited)
				trace.pop()
				visited[i] = False


————————————————————————————————————————————————————————————————————————————————————————————————————
【78】Subsets
Given a set of distinct integers, nums, return all possible subsets (the power set).
Note: The solution set must not contain duplicate subsets.
Example:
Input: nums = [1,2,3]
Output:
[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]
class Solution(object):
	def subsets(self, nums):
		trace = []
		res = []
		self.DFS(nums, res, trace, 0)
		return res
	def DFS(self, nums, res, trace, m):
		if m == len(nums):
			res.append(trace[:])
			return
		trace.append(nums[m])
		self.DFS(nums, res, trace, m+1)
		trace.pop()
		self.DFS(nums, res trace, m+1)
			

————————————————————————————————————————————————————————————————————————————————————————————————————
【90】Subsets II
Given a collection of integers that might contain duplicates, nums, return all possible subsets (the power set).
Note: The solution set must not contain duplicate subsets.
Input: [1,2,2]
Output:
[
  [2],
  [1],
  [1,2,2],
  [2,2],
  [1,2],
  []
]
class Solution(object):
	def subsetsWithDup(self, nums):
		trace = []
		res = []
		nums.sort()
		visited = [False] * len(nums)
		self.DFS(nums, res, trace, 0, visited)
		return res
	def DFS(self, nums, res, trace, m, visited):
		if m == len(nums):
			res.append(trace[:])
			return
		if m>0 and nums[m]==nums[m-1] and visited[m-1]==False:
			self.DFS(nums, res, trace, m+1, visited)
		else:
			trace.append(nums[m])
			visited[m] = True
			self.DFS(nums, res, trace, m+1, visited)
			trace.pop()
			visited[m] = False
			self.DFS(nums, res, trace, m+1, visited)
	#不用多余空间的
	def DFS(self,nums,res,now,k):
		res.append(list(now))
		if k == len(nums):
			return
		i = k
		while i < len(nums):
			now.append(nums[i])
			self.DFS(nums,res,now,i+1)
			while i<len(nums)-1 and nums[i+1]==nums[i]:
				i += 1
			i += 1
			now.pop()


————————————————————————————————————————————————————————————————————————————————————————————————————
【62】Unique Paths
A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).
The robot can only move either down or right at any point in time. 
The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).
How many possible unique paths are there?
class Solution(object):
	def uniquePaths(self, m, n):
		dp = [[0 for i in range(n)] for j in range(m)]
		for i in range(m):
			dp[i][0] = 1
		for i in range(n):
			dp[0][i] = 1
		for i in range(1, m):
			for j in range(1, n):
				dp[i][j] = dp[i-1][j] + dp[i][j-1]
		return dp[-1][-1]


————————————————————————————————————————————————————————————————————————————————————————————————————
【63】Unique Paths II
A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).
The robot can only move either down or right at any point in time. 
The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).
Now consider if some obstacles are added to the grids. How many unique paths would there be?
Input:
[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]
Output: 2
class Solution(object):
	def uniquePathsWithObstacles(self, obstacleGrid):
		m, n = len(obstacleGrid), len(obstacleGrid[0])
		dp = [[0 for i in range(n)] for j in range(m)]
		if obstacleGrid[0][0] == 1:
			return 0
		dp[0][0] = 1
		for i in range(1, m):
			if dp[i-1][0] and obstacleGrid[i][0]!=1:
				dp[i][0] = 1
		for i in range(1, n):
			if dp[0][i-1] and obstacleGrid[0][i]!=1:
				dp[0][i] = 1
		for i in range(1, m):
			for j in range(1, n):
				if obstacleGrid[i][j]!=1:
					dp[i][j] = dp[i-1][j] + dp[i][j-1]
		return dp[m-1][n-1]


————————————————————————————————————————————————————————————————————————————————————————————————————
【91】Decode Ways
A message containing letters from A-Z is being encoded to numbers using the following mapping:
'A' -> 1
'B' -> 2
...
'Z' -> 26
Given a non-empty string containing only digits, determine the total number of ways to decode it.
class Solution(object):
	#这不行，过不了，写动态规划
	def numDecodings(self, s):
		self.res = 0
		self.helper(s)
		return self.res
	def helper(self, s):
		if len(s) == 0:
			self.res += 1
			return 
		if len(s) == 1 and s!='0':
			self.res += 1
			return
		if s[0] == '0':
			return
		self.helper(s[1:])
		if s[:2] <= '26':
			self.helper(s[2:])
		return
	def numDecodings(self, s):
		if not s or s[0]=='0':
			return 0
		dp = [0] * ( len(s) + 1 )
		dp[0] = dp[1] = 1
		for i in range(2,len(s)+1):
			if s[i-1] != '0':
				dp[i] += dp[i-1]
			if s[i-2]!= '0' and s[i-2:i] <= '26':
				dp[i] += dp[i-2]
		return dp[-1]
		
		
————————————————————————————————————————————————————————————————————————————————————————————————————
【89】Gray Code
The gray code is a binary numeral system where two successive values differ in only one bit.
Given a non-negative integer n representing the total number of bits in the code, print the sequence of gray code. 
A gray code sequence must begin with 0.
Input: 2
Output: [0,1,3,2]
Explanation:
00 - 0
01 - 1
11 - 3
10 - 2
class Solution(object):
	def grayCode(self, n):
		if n == 0:
			return [0]
		res = [0, 1]
		for i in range(1, n):
			for j in range(len(res)-1, -1, -1):
				res.append(2**i+res[j])
		return res
	

————————————————————————————————————————————————————————————————————————————————————————————————————
【72】Edit Distance
Given two words word1 and word2, find the minimum number of operations required to convert word1 to word2.
You have the following 3 operations permitted on a word:
Insert a character
Delete a character
Replace a character
class Solution(object):
	def minDistance(self, word1, word2):
		m, n = len(word1), len(word2)
		dp = [[0 for i in range(n+1)] for j in range(m+1)]
		for i in range(m+1):
			dp[i][0] = i
		for i in range(n+1):
			dp[0][i] = i
		for i in range(1, m+1):
			for j in range(1, n+1):
				if word1[i-1] == word2[j-1]:
					dp[i][j] = dp[i-1][j-1]
				else:
					dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])
		return dp[m][n]
		
		
————————————————————————————————————————————————————————————————————————————————————————————————————
【70】Climbing Stairs
You are climbing a stair case. It takes n steps to reach to the top.
Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?
Note: Given n will be a positive integer.
class Solution(object):
	def climbStairs(self, n):
		if n == 0:
			return 0
		g, f = 1, 1
		for i in range(n):
			f = g + f
			g = f - g
		return g


————————————————————————————————————————————————————————————————————————————————————————————————————
【64】Minimum Path Sum
Given a m x n grid filled with non-negative numbers, 
find a path from top left to bottom right which minimizes the sum of all numbers along its path.
Note: You can only move either down or right at any point in time.
Example:
Input:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
Output: 7
Explanation: Because the path 1→3→1→1→1 minimizes the sum.
class Solution(object):
	def minPathSum(self, grid):
		m, n = len(grid), len(grid[0])
		dp = [[0 for i in range(n)] for j in range(m)]
		dp[0][0] = grid[0][0]
		for i in range(1, m):
			dp[i][0] = dp[i-1][0] + grid[i][0]
		for i in range(1, n):
			dp[0][i] = dp[0][i-1] + grid[0][i]
		for i in range(1, m):
			for j in range(1, n):
				dp[i][j] = grid[i][j] + min(dp[i-1][j], dp[i][j-1])
		return dp[m-1][n-1]


————————————————————————————————————————————————————————————————————————————————————————————————————
【87】Scramble String *****
Given a string s1, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively.
Below is one possible representation of s1 = "great":
    great
   /    \
  gr    eat
 / \    /  \
g   r  e   at
           / \
          a   t
class Solution(object):
	def isScramble(self, s1, s2):
		if s1 == s2:
			return True
		if len(s1) != len(s2):
			return False
		c = [0 for i in range(26)]
		for i in s1:
			c[ord(i)-ord('a')] += 1
		for i in s2:
			c[ord(i)-ord('a')] -= 1
		for i in range(26):
			if c[i] != 0:
				return False
		for i in range(1, len(s1)):
			if self.isScramble(s1[i:],s2[i:]) and self.isScramble(s1[:i],s2[:i]):
				return True
			if self.isScramble(s1[i:],s2[:len(s1)-i]) and self.isScramble(s1[:i], s2[len(s1)-i:]):
				return True
		return False




































