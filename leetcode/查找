————————————————————————————————————————————————————————————————————————————————————————————————————————
【127】Word Ladder
Given two words (beginWord and endWord), and a dictionary's word list, 
find the length of shortest transformation sequence from beginWord to endWord, such that:
Only one letter can be changed at a time.
Each transformed word must exist in the word list. Note that beginWord is not a transformed word.
Note:
Return 0 if there is no such transformation sequence.
All words have the same length.
All words contain only lowercase alphabetic characters.
You may assume no duplicates in the word list.
You may assume beginWord and endWord are non-empty and are not the same.
Example 1:
Input:
beginWord = "hit",
endWord = "cog",
wordList = ["hot","dot","dog","lot","log","cog"]
Output: 5
Explanation: As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog",
return its length 5.
class Solution(object):
	def ladderLength(self, beginWord, endWord, wordList):
		if endWord not in wordList:
			return 0
		res = 0
		queue = [beginWord]
		wordList = set(wordList)            #不换成集合就会超时
		while queue and wordList:
			res += 1
			for j in range(len(queue)):
				word = queue.pop(0)
				for i in range(len(word)):
					for j in 'abcdefghijklmnopqrstuvwxyz':
						w = word[:i] + j + word[i+1:]
						if w == word:
							continue
						if w == endWord:
							return res + 1
						if w in wordList:
							queue.append(w)
							wordList.remove(w)
		return 0


————————————————————————————————————————————————————————————————————————————————————————————————————————
【126】Word Ladder II    *****
Given two words (beginWord and endWord), and a dictionary's word list, 
find all shortest transformation sequence(s) from beginWord to endWord, such that:
Only one letter can be changed at a time
Each transformed word must exist in the word list. Note that beginWord is not a transformed word.
Note:
Return an empty list if there is no such transformation sequence.
All words have the same length.
All words contain only lowercase alphabetic characters.
You may assume no duplicates in the word list.
You may assume beginWord and endWord are non-empty and are not the same.
Example 1:
Input:
beginWord = "hit",
endWord = "cog",
wordList = ["hot","dot","dog","lot","log","cog"]
Output:
[
  ["hit","hot","dot","dog","cog"],
  ["hit","hot","lot","log","cog"]
]
class Solution(object):
	def findLadders(self, beginWord, endWord, wordList):
		if endWord not in wordList:
			return []
		res = []
		queue = [[beginWord]]
		wordList = set(wordList)  
		visited = set()
		flag = False
		while queue and wordList:
			for k in range(len(queue)):
				trace = queue.pop(0)
				word = trace[-1]
				for i in range(len(word)):
					for j in 'abcdefghijklmnopqrstuvwxyz':
						w = word[:i] + j + word[i+1:]
						if w == word:
							continue
						if w == endWord:
							trace.append(w)
							res.append(trace[:])
							flag = True
						elif w in wordList:
							queue.append(trace+[w])
							visited.add(w)
			if flag: break
			wordList -= visited
			visited.clear()
		return res


————————————————————————————————————————————————————————————————————————————————————————————————————————
【33】Search in Rotated Sorted Array 
#没有重复	考二分查找
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.
(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).
You are given a target value to search. If found in the array return its index, otherwise return -1.
You may assume no duplicate exists in the array.
Your algorithm's runtime complexity must be in the order of O(log n).
Example 1:
Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
class Solution(object):
	def search(self, nums, target):
		left, right = 0, len(nums)-1
		while left <= right:
			mid = (left + right) >> 1
			if nums[mid] == target:
				return mid
			if nums[mid] > nums[right]: #左边有序
				if nums[mid] > target and nums[left] <= target:
					right = mid - 1
				else:
					left = mid + 1
			else:  #右边有序
				if nums[mid] < target and nums[right] >= target:
					left = mid + 1
				else:
					right = mid - 1	
		return -1
	
	
————————————————————————————————————————————————————————————————————————————————————————————————————————
【81】Search in Rotated Sorted Array II
#有重复	考二分查找
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.
(i.e., [0,0,1,2,2,5,6] might become [2,5,6,0,0,1,2]).
You are given a target value to search. If found in the array return true, otherwise return false.
Example 1:
Input: nums = [2,5,6,0,0,1,2], target = 0
Output: true
class Solution(object):
	def search(self, nums, target):
		left, right = 0, len(nums)-1
		while left <= right:
			mid = (left + right) >> 1
			if nums[mid] == target:
				return True
			if nums[mid] > nums[right]: #左边有序
				if nums[mid] > target and nums[left] <= target:
					right = mid - 1
				else:
					left = mid + 1
			elif nums[mid] < nums[right]:  #右边有序
				if nums[mid] < target and nums[right] >= target:
					left = mid + 1
				else:
					right = mid - 1	
			else:
				right -= 1
		return False


————————————————————————————————————————————————————————————————————————————————————————————————————————
【39】Combination Sum
# 回溯法
Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), 
find all unique combinations in candidates where the candidate numbers sums to target.
The same repeated number may be chosen from candidates unlimited number of times.
Note:
All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:
Input: candidates = [2,3,6,7], target = 7,
A solution set is:
[
  [7],
  [2,2,3]
]
class Solution(object):
	def combinationSum(self, candidates, target):
		res = []
		trace = []
		self.DFS(candidates, target, res, trace, 0)
		return res
	def DFS(self, candidates, target, res, trace, m):
		if target == 0:
			res.append(trace[:])
			return 
		if target < 0 or m >= len(candidates):
			return 
		self.DFS(candidates, target, res, trace, m+1)
		trace.append(candidates[m])
		self.DFS(candidates, target-candidates[m], res, trace, m)
		trace.pop()
	
	
————————————————————————————————————————————————————————————————————————————————————————————————————————
【40】Combination Sum II 
# 只能用一次	回溯
Given a collection of candidate numbers (candidates) and a target number (target), 
find all unique combinations in candidates where the candidate numbers sums to target.
Each number in candidates may only be used once in the combination.
Note:
All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:
Input: candidates = [10,1,2,7,6,1,5], target = 8,
A solution set is:
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]
class Solution(object):
	def combinationSum2(self, candidates, target):
		candidates.sort()
		res = []
		trace = []
		visited = [False] * len(candidates)
		self.DFS(candidates, target, res, trace, visited, 0)
		return res
	def DFS(self, candidates, target, res, trace, visited, m):
		if target == 0:
			res.append(trace[:])
			return 
		if target < 0 or m >= len(candidates):
			return 
		self.DFS(candidates, target, res, trace, visited, m+1)
		if m==0 or candidates[m-1]!=candidates[m] or visited[m-1]==True:
			trace.append(candidates[m])
			visited[m] = True
			self.DFS(candidates, target-candidates[m], res, trace, visited, m+1)
			trace.pop()
			visited[m] = False


————————————————————————————————————————————————————————————————————————————————————————————————————————
【51】N-Queens
The n-queens puzzle is the problem of placing n queens on an n×n chessboard such that no two queens attack each other.
Given an integer n, return all distinct solutions to the n-queens puzzle.
Each solution contains a distinct board configuration of the n-queens' placement, 
where 'Q' and '.' both indicate a queen and an empty space respectively.
Example:
Input: 4
Output: [
 [".Q..",  // Solution 1
  "...Q",
  "Q...",
  "..Q."],
 ["..Q.",  // Solution 2
  "Q...",
  "...Q",
  ".Q.."]
]
class Solution(object):
	def solveNQueens(self, n):
		res = []
		trace = ['.'*n] * n
		flag_col = [False] * n
		flag_45 = [False] * (2 * n - 1)
		flag_135 = [False] * (2 * n - 1)
		self.DFS(n, res, trace, 0, flag_col, flag_45, flag_135)
		return res
	def DFS(self, n, res, trace, m, flag_col, flag_45, flag_135):
		if m >= n:
			res.append(trace[:])
			return 
		for i in range(n):
			if flag_col[i]==False and flag_45[m+i]==False and flag_135[n-1+m-i]==False: 
				trace[m] = '.' * i + 'Q' + '.' * (n-i-1)
				flag_col[i] = True
				flag_45[m+i] = True
				flag_135[n-1+m-i] = True
				self.DFS(n, res, trace, m+1, flag_col, flag_45, flag_135)
				trace[m] = '.' * n
				flag_col[i] = False
				flag_45[m+i] = False
				flag_135[n-1+m-i] = False
				
				
————————————————————————————————————————————————————————————————————————————————————————————————————————
【52】N-Queens II    
Input: 4
Output: 2
Explanation: There are two distinct solutions to the 4-queens puzzle as shown below.
[
 [".Q..",  // Solution 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // Solution 2
  "Q...",
  "...Q",
  ".Q.."]
]
class Solution(object):
	def totalNQueens(self, n):
		self.res = 0
		trace = ['.'*n] * n
		flag_col = [False] * n
		flag_45 = [False] * (2 * n - 1)
		flag_135 = [False] * (2 * n - 1)
		self.DFS(n, trace, 0, flag_col, flag_45, flag_135)
		return self.res
	def DFS(self, n, trace, m, flag_col, flag_45, flag_135):
		if m >= n:
			self.res += 1
			return 
		for i in range(n):
			if flag_col[i]==False and flag_45[m+i]==False and flag_135[n-1+m-i]==False: 
				trace[m] = '.' * i + 'Q' + '.' * (n-i-1)
				flag_col[i] = True
				flag_45[m+i] = True
				flag_135[n-1+m-i] = True
				self.DFS(n, trace, m+1, flag_col, flag_45, flag_135)
				trace[m] = '.' * n
				flag_col[i] = False
				flag_45[m+i] = False
				flag_135[n-1+m-i] = False
				
				
————————————————————————————————————————————————————————————————————————————————————————————————————————
【79】Word Search
#之前搞了一个visited数组记录，后来发现还是在原数组上改比较好，省空间
Given a 2D board and a word, find if the word exists in the grid.
The word can be constructed from letters of sequentially adjacent cell, 
where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.
Example:
board =
[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]
Given word = "ABCCED", return true.
Given word = "SEE", return true.
Given word = "ABCB", return false.
class Solution(object):
	def exist(self, board, word):
		m, n = len(board), len(board[0])
		res = False
		for i in range(m):
			for j in range(n):
				if board[i][j] == word[0]:
					res = self.DFS(board, word, m, n, i, j, 0)
					if res:
						return res
		return res
	def DFS(self, board, word, m, n, i, j, index):
		if index == len(word):
			return True
		if i<0 or i>=m or j<0 or j>=n:
			return False
		if board[i][j] == word[index]:
			board[i][j] = '.'
			myList = [(1,0),(-1,0),(0,1),(0,-1)]
			for k in range(4):
				row = i + myList[k][0]
				col = j + myList[k][1]
				if self.DFS(board, word, m, n, row, col, index+1):
					return True
			board[i][j] = word[index]
		return False
		
		
————————————————————————————————————————————————————————————————————————————————————————————————————————
【77】Combinations    
Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.
Example:
Input: n = 4, k = 2
Output:
[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]
class Solution(object):
	def combine(self, n, k):
		res = []
		trace = []
		self.DFS(n, k, res, trace, 1)
		return res
	def DFS(self, n, k, res, trace, m):
		if len(trace) == k:
			res.append(trace[:])
			return
		if m > n:
			return
		trace.append(m)
		self.DFS(n, k, res, trace, m+1)
		trace.pop()
		self.DFS(n, k, res, trace, m+1)
	
	
————————————————————————————————————————————————————————————————————————————————————————————————————————
【36】Valid Sudoku
Determine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:
Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the 9 3x3 sub-boxes of the grid must contain the digits 1-9 without repetition.
class Solution(object):
	def isValidSudoku(self, board):
		st_row = set()
		st_col = set()
		st_9 = set()
		for i in range(9):
			for j in range(9):
				if board[i][j] == '.':
					continue
				num = board[i][j] 
				if (i,num) in st_row or (j,num) in st_col or (i//3+3*(j//3),num) in st_9:
					return False
				st_row.add((i,num))
				st_col.add((j,num))
				st_9.add((i//3+3*(j//3),num))
		return True


————————————————————————————————————————————————————————————————————————————————————————————————————————
【37】Sudoku Solver
Write a program to solve a Sudoku puzzle by filling the empty cells.
A sudoku solution must satisfy all of the following rules:
Each of the digits 1-9 must occur exactly once in each row.
Each of the digits 1-9 must occur exactly once in each column.
Each of the the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.
The given board contain only digits 1-9 and the character '.'.
You may assume that the given Sudoku puzzle will have a single unique solution.
The given board size is always 9x9.
class Solution(object):
	def solveSudoku(self, board):
	        """
        	:type board: List[List[str]]
        	:rtype: void Do not return anything, modify board in-place instead.
        	"""
		self.DFS(board, 0)
	def DFS(self, board, m):
		if m == 81:
			return True
		i = m // 9
		j = m % 9
		if board[i][j] != '.':
			if self.DFS(board, m+1):
				return True
			else:
				return False
		for k in '123456789':
			if not self.isValid(board, k, i, j):
				continue
			board[i][j] = k
			if self.DFS(board, m+1):
				return True
			board[i][j] = '.'
		return False
	def isValid(self, board, k, a, b):
		m = a // 3
		n = b // 3
		for i in range(9):
			if board[i][b] == k or board[a][i] == k:
				return False
		for i in range(3):
			for j in range(3):
				if board[m*3+i][n*3+j] == k:
					return False
		return True


————————————————————————————————————————————————————————————————————————————————————————————————————————
【17】Letter Combinations of a Phone Number
Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.
A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.
Input: "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
class Solution(object):
	#循环
	def letterCombinations(self, digits):
		dict = {'2':'abc','3':'def','4':'ghi','5':'jkl','6':'mno','7':'pqrs','8':'tuv','9':'wxyz'}
		if not digits:
			return []
		pre = list(dict[digits[0]])
		for i in range(1, len(digits)):
			res = []
			for j in pre:
				for c in dict[digits[i]]:
					res.append(j+c)
			pre = res
		return pre
	#回溯
	def letterCombinations(self, digits):
		if not digits:
			return []
		dict = {'2':'abc','3':'def','4':'ghi','5':'jkl','6':'mno','7':'pqrs','8':'tuv','9':'wxyz'}
		res = []
		trace = []
		self.DFS(digits, dict, res, trace, 0)
		return res
	def DFS(self, digits, dict, res, trace, m):
		if m == len(digits):
			res.append(''.join(trace))
			return                            #总是忘记return
		for i in dict[digits[m]]:
			trace.append(i)
			self.DFS(digits, dict, res, trace, m+1)
			trace.pop()
			

————————————————————————————————————————————————————————————————————————————————————————————————————————
【22】Generate Parentheses
Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.
For example, given n = 3, a solution set is:
[
  "((()))",
  "(()())",
  "(())()",
  "()(())",
  "()()()"
]
class Solution(object):
	def generateParenthesis(self, n):
		res = []
		trace = []
		self.DFS(n, res, trace, 0, 0)
		return res
	def DFS(self, n, res, trace, left, right):
		if left == n and right == n:
			res.append(''.join(trace))
			return
		if left < n:
			trace.append('(')
			self.DFS(n, res, trace, left+1, right)
			trace.pop()
		if right < n and left > right:
			trace.append(')')
			self.DFS(n, res, trace, left, right + 1)
			trace.pop()
		
		
————————————————————————————————————————————————————————————————————————————————————————————————————————
【72】Set Matrix Zeroes    
Given a m x n matrix, if an element is 0, set its entire row and column to 0. Do it in-place.
Example 1:
Input: 
[
  [1,1,1],
  [1,0,1],
  [1,1,1]
]
Output: 
[
  [1,0,1],
  [0,0,0],
  [1,0,1]
]
class Solution(object):
	def setZeroes(self, matrix):
		m, n = len(matrix), len(matrix[0])
		flag_row = flag_col = False
		for i in range(m):
			if matrix[i][0] == 0:
				flag_col = True
				break
		for i in range(n):
			if matrix[0][i] == 0:
				flag_row = True
				break
		for i in range(1, m):
			for j in range(1, n):
				if matrix[i][j] == 0:
					matrix[i][0] = 0
					matrix[0][j] = 0
		for i in range(1, m):
			for j in range(1, n):
				if matrix[i][0] == 0 or matrix[0][j] == 0:
					matrix[i][j] = 0
		if flag_col:
			for i in range(m):
				matrix[i][0] = 0
		if flag_row:
			for i in range(n):
				matrix[0][i] = 0


————————————————————————————————————————————————————————————————————————————————————————————————————————



————————————————————————————————————————————————————————————————————————————————————————————————————————




